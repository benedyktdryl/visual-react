{
  "components/_util/transButton.tsx": {
    "description": "",
    "displayName": "TransButton",
    "methods": [
      {
        "name": "onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "btn",
            "type": {
              "name": "HTMLDivElement",
              "alias": "HTMLDivElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e?: React.MouseEvent<HTMLDivElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "HTMLDivElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "noStyle": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/_util/wave.tsx": {
    "description": "",
    "displayName": "Wave",
    "methods": [
      {
        "name": "onClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLElement",
              "alias": "HTMLElement"
            }
          },
          {
            "name": "waveColor",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onTransitionStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "AnimationEvent",
              "alias": "AnimationEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onTransitionEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "AnimationEvent",
              "alias": "AnimationEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getAttributeName",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "bindAnimationEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLElement",
              "alias": "HTMLElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "resetEffect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLElement",
              "alias": "HTMLElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderWave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ csp }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "insertExtraNode": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/affix/index.tsx": {
    "description": "",
    "displayName": "Affix",
    "methods": [
      {
        "name": "getOffsetTop",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getOffsetBottom",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "savePlaceholderNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLDivElement",
              "alias": "HTMLDivElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveFixedNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLDivElement",
              "alias": "HTMLDivElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "measure",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "prepareMeasure",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "lazyUpdatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAffix",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "offsetTop": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "距离窗口顶部达到指定偏移量后触发"
      },
      "offset": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "offsetBottom": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "距离窗口底部达到指定偏移量后触发"
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(affixed?: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "affixed",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "固定状态改变时触发的回调函数"
      },
      "target": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => Window | HTMLElement | null",
          "signature": {
            "arguments": [],
            "return": {
              "name": "union",
              "raw": "Window | HTMLElement | null",
              "elements": [
                {
                  "name": "Window"
                },
                {
                  "name": "HTMLElement"
                },
                {
                  "name": "null"
                }
              ]
            }
          }
        },
        "description": "设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数",
        "defaultValue": {
          "value": "function getDefaultTarget() {\n  return typeof window !== 'undefined' ? window : null;\n}",
          "computed": false
        }
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactReactElement",
          "raw": "React.ReactElement"
        },
        "description": ""
      }
    }
  },
  "components/alert/index.tsx": {
    "description": "",
    "displayName": "Alert",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "animationEnd",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAlert",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'success' | 'info' | 'warning' | 'error'",
          "elements": [
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'info'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'error'"
            }
          ]
        },
        "description": "Type of Alert styles, options:`success`, `info`, `warning`, `error`"
      },
      "closable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether Alert can be closed"
      },
      "closeText": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "Close text to show"
      },
      "message": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "Content of Alert"
      },
      "description": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "Additional content of Alert"
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLButtonElement>",
          "elements": [
            {
              "name": "HTMLButtonElement"
            }
          ]
        },
        "description": "Callback when close Alert"
      },
      "afterClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Trigger when animation ending of Alert"
      },
      "showIcon": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show icon"
      },
      "iconType": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "banner": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      }
    }
  },
  "components/anchor/Anchor.tsx": {
    "description": "",
    "displayName": "Anchor",
    "methods": [
      {
        "name": "getCurrentAnchor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "offsetTop",
            "type": null
          },
          {
            "name": "bounds",
            "type": null
          }
        ],
        "returns": {
          "type": {
            "name": "string"
          }
        }
      },
      {
        "name": "handleScrollTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "link",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveInkNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLSpanElement",
              "alias": "HTMLSpanElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setCurrentActiveLink",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "link",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updateInk",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAnchor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "offsetTop": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "bounds": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "affix": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showInkInFixed": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "getContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => AnchorContainer",
          "signature": {
            "arguments": [],
            "return": {
              "name": "union",
              "raw": "HTMLElement | Window",
              "elements": [
                {
                  "name": "HTMLElement"
                },
                {
                  "name": "Window"
                }
              ]
            }
          }
        },
        "description": "",
        "defaultValue": {
          "value": "function getDefaultContainer() {\n  return window;\n}",
          "computed": false
        }
      },
      "getCurrentAnchor": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => string",
          "signature": {
            "arguments": [],
            "return": {
              "name": "string"
            }
          }
        },
        "description": "Return customize highlight anchor"
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  e: React.MouseEvent<HTMLElement>,\n  link: { title: React.ReactNode; href: string },\n) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              },
              {
                "name": "link",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ title: React.ReactNode; href: string }",
                  "signature": {
                    "properties": [
                      {
                        "key": "title",
                        "value": {
                          "name": "ReactReactNode",
                          "raw": "React.ReactNode",
                          "required": true
                        }
                      },
                      {
                        "key": "href",
                        "value": {
                          "name": "string",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "targetOffset": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Scroll to target offset value, if none, it's offsetTop prop value or 0."
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(currentActiveLink: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "currentActiveLink",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Listening event when scrolling change active link"
      }
    },
    "childContext": {
      "antAnchor": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "components/anchor/AnchorLink.tsx": {
    "description": "",
    "displayName": "AnchorLink",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderAnchorLink",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "href": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'#'",
          "computed": false
        }
      },
      "target": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "title": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    },
    "context": {
      "antAnchor": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "components/auto-complete/InputElement.tsx": {
    "description": "",
    "displayName": "InputElement",
    "methods": [
      {
        "name": "saveRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ele",
            "type": {
              "name": "HTMLInputElement",
              "alias": "HTMLInputElement"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactReactElement",
          "raw": "React.ReactElement<any>",
          "elements": [
            {
              "name": "any"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/auto-complete/index.tsx": {
    "description": "",
    "displayName": "AutoComplete",
    "methods": [
      {
        "name": "saveSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getInputElement",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAutoComplete",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "value": {
        "required": false,
        "tsType": {
          "name": "SelectValue"
        },
        "description": ""
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "SelectValue"
        },
        "description": ""
      },
      "dataSource": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "string\n| DataSourceItemObject\n| React.ReactElement<OptionProps>\n| React.ReactElement<OptGroupProps>",
              "elements": [
                {
                  "name": "string"
                },
                {
                  "name": "DataSourceItemObject"
                },
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<OptionProps>",
                  "elements": [
                    {
                      "name": "OptionProps"
                    }
                  ]
                },
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<OptGroupProps>",
                  "elements": [
                    {
                      "name": "OptGroupProps"
                    }
                  ]
                }
              ]
            }
          ],
          "raw": "DataSourceItemType[]"
        },
        "description": ""
      },
      "dropdownMenuStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "backfill": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "optionLabelProp": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'children'",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: SelectValue) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "SelectValue"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: SelectValue, option: Object) => any",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "SelectValue"
                }
              },
              {
                "name": "option",
                "type": {
                  "name": "Object"
                }
              }
            ],
            "return": {
              "name": "any"
            }
          }
        },
        "description": ""
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: SelectValue) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "SelectValue"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onFocus": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ValidInputElement\n| React.ReactElement<InputProps>\n| React.ReactElement<OptionProps>\n| Array<React.ReactElement<OptionProps>>",
          "elements": [
            {
              "name": "union",
              "raw": "HTMLInputElement\n| HTMLTextAreaElement\n| React.ReactElement<AutoCompleteInputProps>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                },
                {
                  "name": "HTMLTextAreaElement"
                },
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<AutoCompleteInputProps>",
                  "elements": [
                    {
                      "name": "AutoCompleteInputProps"
                    }
                  ]
                }
              ]
            },
            {
              "name": "ReactReactElement",
              "raw": "React.ReactElement<InputProps>",
              "elements": [
                {
                  "name": "InputProps"
                }
              ]
            },
            {
              "name": "ReactReactElement",
              "raw": "React.ReactElement<OptionProps>",
              "elements": [
                {
                  "name": "OptionProps"
                }
              ]
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<OptionProps>",
                  "elements": [
                    {
                      "name": "OptionProps"
                    }
                  ]
                }
              ],
              "raw": "Array<React.ReactElement<OptionProps>>"
            }
          ]
        },
        "description": ""
      },
      "transitionName": {
        "defaultValue": {
          "value": "'slide-up'",
          "computed": false
        },
        "required": false
      },
      "choiceTransitionName": {
        "defaultValue": {
          "value": "'zoom'",
          "computed": false
        },
        "required": false
      },
      "showSearch": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "filterOption": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  "components/avatar/index.tsx": {
    "description": "",
    "displayName": "Avatar",
    "methods": [
      {
        "name": "setScale",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleImgLoadError",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAvatar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "shape": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'circle' | 'square'",
          "elements": [
            {
              "name": "literal",
              "value": "'circle'"
            },
            {
              "name": "literal",
              "value": "'square'"
            }
          ]
        },
        "description": "Shape of avatar, options:`circle`, `square`",
        "defaultValue": {
          "value": "'circle'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'large' | 'small' | 'default' | number",
          "elements": [
            {
              "name": "literal",
              "value": "'large'"
            },
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "src": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Src of image avatar"
      },
      "srcSet": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Srcset of image avatar"
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | React.ReactNode",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          ]
        },
        "description": "Type of the Icon to be used in avatar"
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "alt": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onError": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => boolean",
          "signature": {
            "arguments": [],
            "return": {
              "name": "boolean"
            }
          }
        },
        "description": ""
      }
    }
  },
  "components/back-top/index.tsx": {
    "description": "",
    "displayName": "BackTop",
    "methods": [
      {
        "name": "scrollToTop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderBackTop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "visibilityHeight": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "target": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => HTMLElement | Window",
          "signature": {
            "arguments": [],
            "return": {
              "name": "union",
              "raw": "HTMLElement | Window",
              "elements": [
                {
                  "name": "HTMLElement"
                },
                {
                  "name": "Window"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "visible": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/badge/ScrollNumber.tsx": {
    "description": "",
    "displayName": "ScrollNumber",
    "methods": [
      {
        "name": "getPositionByNum",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "num",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "i",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onAnimated",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCurrentNumber",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "num",
            "type": {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            }
          },
          {
            "name": "i",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderNumberElement",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderScrollNumber",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "count": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | number | null",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "displayComponent": {
        "required": false,
        "tsType": {
          "name": "ReactReactElement",
          "raw": "React.ReactElement<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "component": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onAnimated": {
        "required": false,
        "tsType": {
          "name": "Function"
        },
        "description": "",
        "defaultValue": {
          "value": "() {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | number | null",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/badge/index.tsx": {
    "description": "",
    "displayName": "Badge",
    "methods": [
      {
        "name": "getNumberedDispayCount",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getDispayCount",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getScrollNumberTitle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getStyleWithOffset",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getBadgeClassName",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "hasStatus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "isZero",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isDot",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isHidden",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderStatusText",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderDispayComponent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderBadgeNumber",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "scrollNumberPrefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderBadge",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "count": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Number to show in badge",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "showZero": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "dot": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "whether to show red dot without number",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overflowCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max count to show",
        "tsType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "99",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "scrollNumberPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "status": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'success' | 'processing' | 'default' | 'error' | 'warning'",
          "elements": [
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'processing'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            }
          ]
        },
        "description": ""
      },
      "color": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "text": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "offset": {
        "required": false,
        "tsType": {
          "name": "tuple",
          "raw": "[number | string, number | string]",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/breadcrumb/Breadcrumb.tsx": {
    "description": "",
    "displayName": "Breadcrumb",
    "methods": [
      {
        "name": "getPath",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "path",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "params",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "addChildPath",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "paths",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "childPath",
            "type": null
          },
          {
            "name": "params",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "genForRoutes",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  routes = [],\n  params = {},\n  separator,\n  itemRender = defaultItemRender,\n}: BreadcrumbProps",
            "type": {
              "name": "BreadcrumbProps",
              "alias": "BreadcrumbProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderBreadcrumb",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "separator": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "defaultValue": {
          "value": "'/'",
          "computed": false
        }
      },
      "routes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "Route"
            }
          ],
          "raw": "Route[]"
        }
      },
      "params": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "itemRender": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  route: Route,\n  params: any,\n  routes: Array<Route>,\n  paths: Array<string>,\n) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "route",
                "type": {
                  "name": "Route"
                }
              },
              {
                "name": "params",
                "type": {
                  "name": "any"
                }
              },
              {
                "name": "routes",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "Route"
                    }
                  ],
                  "raw": "Array<Route>"
                }
              },
              {
                "name": "paths",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "Array<string>"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/breadcrumb/BreadcrumbItem.tsx": {
    "description": "",
    "displayName": "BreadcrumbItem",
    "methods": [
      {
        "name": "renderBreadcrumbItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderBreadcrumbNode",
        "docblock": "if overlay is have\nWrap a DropDown",
        "modifiers": [],
        "params": [
          {
            "name": "breadcrumbItem",
            "type": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          },
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null,
        "description": "if overlay is have\nWrap a DropDown"
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "separator": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "element"
            }
          ]
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "defaultValue": {
          "value": "'/'",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "overlay": {
        "required": false,
        "tsType": {
          "name": "DropDownProps['overlay']",
          "raw": "DropDownProps['overlay']"
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLAnchorElement | HTMLSpanElement>",
          "elements": [
            {
              "name": "union",
              "raw": "HTMLAnchorElement | HTMLSpanElement",
              "elements": [
                {
                  "name": "HTMLAnchorElement"
                },
                {
                  "name": "HTMLSpanElement"
                }
              ]
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/breadcrumb/BreadcrumbSeparator.tsx": {
    "description": "",
    "displayName": "BreadcrumbSeparator",
    "methods": [
      {
        "name": "renderSeparator",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ]
  },
  "components/button/button-group.tsx": {
    "description": "",
    "displayName": "ButtonGroup",
    "methods": []
  },
  "components/button/button.tsx": {
    "description": "",
    "displayName": "Button",
    "methods": [
      {
        "name": "saveButtonRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "union",
              "raw": "HTMLElement | null",
              "elements": [
                {
                  "name": "HTMLElement"
                },
                {
                  "name": "null"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "fixTwoCNChar",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isNeedInserted",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls, autoInsertSpaceInButton }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "shape": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "ButtonShapes"
        },
        "required": false,
        "description": ""
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "ButtonSizes"
        },
        "required": false,
        "description": ""
      },
      "htmlType": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "ButtonHTMLTypes"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "loading": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "ghost": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/calendar/Header.tsx": {
    "description": "",
    "displayName": "Header",
    "methods": [
      {
        "name": "getYearSelectElement",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "year",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getMonthSelectElement",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "month",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "months",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "number"
                }
              ],
              "raw": "number[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onYearChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "year",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onMonthChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "month",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onInternalTypeChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "RadioChangeEvent",
              "alias": "RadioChangeEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onTypeChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "type",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getCalenderHeaderNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLDivElement",
              "alias": "HTMLDivElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getMonthYearSelections",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "getPrefixCls",
            "type": {
              "name": "ConfigConsumerProps['getPrefixCls']",
              "raw": "ConfigConsumerProps['getPrefixCls']"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getTypeSwitch",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "headerRenderCustom",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "headerRender",
            "type": {
              "name": "signature",
              "type": "function",
              "raw": "(headerRender: RenderHeader) => React.ReactNode",
              "signature": {
                "arguments": [
                  {
                    "name": "headerRender",
                    "type": {
                      "name": "RenderHeader"
                    }
                  }
                ],
                "return": {
                  "name": "ReactReactNode",
                  "raw": "React.ReactNode"
                }
              },
              "alias": "HeaderRender"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          }
        }
      },
      {
        "name": "renderHeader",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "locale": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "fullscreen": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "yearSelectOffset": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "yearSelectTotal": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "type": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onValueChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: moment.Moment) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onTypeChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(type: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "type",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "value": {
        "required": true,
        "tsType": {
          "name": "moment.Moment"
        },
        "description": ""
      },
      "validRange": {
        "required": false,
        "tsType": {
          "name": "tuple",
          "raw": "[moment.Moment, moment.Moment]",
          "elements": [
            {
              "name": "moment.Moment"
            },
            {
              "name": "moment.Moment"
            }
          ]
        },
        "description": ""
      },
      "headerRender": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(headerRender: RenderHeader) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "headerRender",
                "type": {
                  "name": "RenderHeader"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      }
    }
  },
  "components/calendar/index.tsx": {
    "description": "",
    "displayName": "Calendar",
    "methods": [
      {
        "name": "onHeaderValueChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onHeaderTypeChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "mode",
            "type": {
              "name": "union",
              "raw": "'month' | 'year'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'month'"
                },
                {
                  "name": "literal",
                  "value": "'year'"
                }
              ],
              "alias": "CalendarMode"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onPanelChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          },
          {
            "name": "mode",
            "type": {
              "name": "union",
              "raw": "CalendarMode | undefined",
              "elements": [
                {
                  "name": "union",
                  "raw": "'month' | 'year'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'month'"
                    },
                    {
                      "name": "literal",
                      "value": "'year'"
                    }
                  ]
                },
                {
                  "name": "undefined"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          },
          {
            "name": "way",
            "type": {
              "name": "union",
              "raw": "'select' | 'changePanel'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'select'"
                },
                {
                  "name": "literal",
                  "value": "'changePanel'"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getDateRange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "validRange",
            "type": {
              "name": "tuple",
              "raw": "[moment.Moment, moment.Moment]",
              "elements": [
                {
                  "name": "moment.Moment"
                },
                {
                  "name": "moment.Moment"
                }
              ]
            }
          },
          {
            "name": "disabledDate",
            "optional": true,
            "type": {
              "name": "signature",
              "type": "function",
              "raw": "(current: moment.Moment) => boolean",
              "signature": {
                "arguments": [
                  {
                    "name": "current",
                    "type": {
                      "name": "moment.Moment"
                    }
                  }
                ],
                "return": {
                  "name": "boolean"
                }
              }
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getDefaultLocale",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "monthCellRender",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "dateCellRender",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderCalendar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "locale",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "localeCode",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "monthCellRender": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: moment.Moment) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "dateCellRender": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: moment.Moment) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "monthFullCellRender": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: moment.Moment) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "dateFullCellRender": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: moment.Moment) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "fullscreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "locale": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "any"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        }
      },
      "onPanelChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date?: moment.Moment, mode?: CalendarMode) => void",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              },
              {
                "name": "mode",
                "type": {
                  "name": "union",
                  "raw": "'month' | 'year'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'month'"
                    },
                    {
                      "name": "literal",
                      "value": "'year'"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "function noop() {\n  return null;\n}",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object as PropTypes.Requireable<moment.Moment>"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "moment.Moment"
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date?: moment.Moment) => void",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "function noop() {\n  return null;\n}",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date?: moment.Moment) => void",
          "signature": {
            "arguments": [
              {
                "name": "date",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "function noop() {\n  return null;\n}",
          "computed": false
        }
      },
      "headerRender": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "HeaderRender"
        }
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "moment.Moment"
        },
        "description": ""
      },
      "mode": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'month' | 'year'",
          "elements": [
            {
              "name": "literal",
              "value": "'month'"
            },
            {
              "name": "literal",
              "value": "'year'"
            }
          ]
        },
        "description": ""
      },
      "disabledDate": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(current: moment.Moment) => boolean",
          "signature": {
            "arguments": [
              {
                "name": "current",
                "type": {
                  "name": "moment.Moment"
                }
              }
            ],
            "return": {
              "name": "boolean"
            }
          }
        },
        "description": ""
      },
      "validRange": {
        "required": false,
        "tsType": {
          "name": "tuple",
          "raw": "[moment.Moment, moment.Moment]",
          "elements": [
            {
              "name": "moment.Moment"
            },
            {
              "name": "moment.Moment"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/card/Grid.tsx": {
    "description": "",
    "displayName": "Grid",
    "methods": []
  },
  "components/card/Meta.tsx": {
    "description": "",
    "displayName": "Meta",
    "methods": []
  },
  "components/card/index.tsx": {
    "description": "",
    "displayName": "Card",
    "methods": [
      {
        "name": "getCompatibleHoverable",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onTabChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "isContainGrid",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCard",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "extra": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "bordered": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "headStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "bodyStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "noHovering": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "hoverable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'small'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'small'"
            }
          ]
        },
        "description": ""
      },
      "type": {
        "required": false,
        "tsType": {
          "name": "literal",
          "value": "'inner'"
        },
        "description": ""
      },
      "cover": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "actions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          ],
          "raw": "React.ReactNode[]"
        },
        "description": ""
      },
      "tabList": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "CardTabListType"
            }
          ],
          "raw": "CardTabListType[]"
        },
        "description": ""
      },
      "tabBarExtraContent": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | null",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      },
      "onTabChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(key: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "key",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "activeTabKey": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "defaultActiveTabKey": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    },
    "composes": [
      "Omit"
    ]
  },
  "components/carousel/index.tsx": {
    "description": "",
    "displayName": "Carousel",
    "methods": [
      {
        "name": "getDotPosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "union",
            "raw": "'top' | 'bottom' | 'left' | 'right'",
            "elements": [
              {
                "name": "literal",
                "value": "'top'"
              },
              {
                "name": "literal",
                "value": "'bottom'"
              },
              {
                "name": "literal",
                "value": "'left'"
              },
              {
                "name": "literal",
                "value": "'right'"
              }
            ]
          }
        }
      },
      {
        "name": "saveSlick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onWindowResized",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "next",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "prev",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "goTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "slide",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "dontAnimate",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCarousel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "effect": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'scrollx' | 'fade'",
          "elements": [
            {
              "name": "literal",
              "value": "'scrollx'"
            },
            {
              "name": "literal",
              "value": "'fade'"
            }
          ]
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "slickGoTo": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "dotPosition": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'top' | 'bottom' | 'left' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'top'"
            },
            {
              "name": "literal",
              "value": "'bottom'"
            },
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "dots": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "arrows": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "draggable": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Settings"
    ]
  },
  "components/cascader/index.tsx": {
    "description": "",
    "displayName": "Cascader",
    "methods": [
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "selectedOptions",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getLabel",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "Input",
              "alias": "Input"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "selectedOptions",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "CascaderOptionType"
                }
              ],
              "raw": "CascaderOptionType[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handlePopupVisibleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "popupVisible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputBlur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleInputClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactKeyboardEvent",
              "raw": "React.KeyboardEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "clearSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "generateFilteredOptions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "union",
              "raw": "string | undefined",
              "elements": [
                {
                  "name": "string"
                },
                {
                  "name": "undefined"
                }
              ]
            }
          },
          {
            "name": "renderEmpty",
            "type": {
              "name": "RenderEmptyHandler",
              "alias": "RenderEmptyHandler"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCascader",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          },
          {
            "name": "locale",
            "type": {
              "name": "CascaderLocale",
              "alias": "CascaderLocale"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "options": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "CascaderOptionType"
            }
          ],
          "raw": "CascaderOptionType[]"
        },
        "description": "可选项数据源",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "默认的选中项"
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "指定选中项"
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string[], selectedOptions?: CascaderOptionType[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "selectedOptions",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "CascaderOptionType"
                    }
                  ],
                  "raw": "CascaderOptionType[]"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "选择完成后的回调"
      },
      "displayRender": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(label: string[], selectedOptions?: CascaderOptionType[]) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "label",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "selectedOptions",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "CascaderOptionType"
                    }
                  ],
                  "raw": "CascaderOptionType[]"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": "选择后展示的渲染函数"
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "自定义样式"
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "自定义类名"
      },
      "popupClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "自定义浮层类名"
      },
      "popupPlacement": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "defaultValue": {
          "value": "'bottomLeft'",
          "computed": false
        }
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "输入框占位文本"
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "输入框大小，可选 `large` `default` `small`"
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "禁用",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "allowClear": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "是否支持清除",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showSearch": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | ShowSearchType",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "ShowSearchType"
            }
          ]
        },
        "description": ""
      },
      "notFoundContent": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "loadData": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedOptions?: CascaderOptionType[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "selectedOptions",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "CascaderOptionType"
                    }
                  ],
                  "raw": "CascaderOptionType[]"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "expandTrigger": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'click' | 'hover'",
          "elements": [
            {
              "name": "literal",
              "value": "'click'"
            },
            {
              "name": "literal",
              "value": "'hover'"
            }
          ]
        },
        "description": "次级菜单的展开方式，可选 'click' 和 'hover'"
      },
      "changeOnSelect": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "当此项为 true 时，点选每级菜单选项值都会发生变化"
      },
      "onPopupVisibleChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(popupVisible: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "popupVisible",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "浮层可见变化时回调"
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "inputPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "getPopupContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: HTMLElement) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "HTMLElement"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      },
      "popupVisible": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "fieldNames": {
        "required": false,
        "tsType": {
          "name": "FieldNamesType"
        },
        "description": "use this after antd@3.7.0"
      },
      "filedNames": {
        "required": false,
        "tsType": {
          "name": "FieldNamesType"
        },
        "description": "typo props name before antd@3.7.0"
      },
      "suffixIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "transitionName": {
        "defaultValue": {
          "value": "'slide-up'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/checkbox/Checkbox.tsx": {
    "description": "",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "saveCheckbox",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCheckbox",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "defaultChecked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "checked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: T) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "CheckboxChangeEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onMouseEnter": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onMouseLeave": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onKeyPress": {
        "required": false,
        "tsType": {
          "name": "ReactKeyboardEventHandler",
          "raw": "React.KeyboardEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onKeyDown": {
        "required": false,
        "tsType": {
          "name": "ReactKeyboardEventHandler",
          "raw": "React.KeyboardEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "tabIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "name": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "indeterminate": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "context": {
      "checkboxGroup": {
        "type": {
          "name": "any"
        },
        "required": false
      }
    }
  },
  "components/checkbox/Group.tsx": {
    "description": "",
    "displayName": "CheckboxGroup",
    "methods": [
      {
        "name": "getOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cancelValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "registerValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "toggleOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "option",
            "type": {
              "name": "CheckboxOptionType",
              "alias": "CheckboxOptionType"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderGroup",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "defaultValue": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "string | number | boolean",
              "elements": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ],
          "raw": "Array<CheckboxValueType>"
        }
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "string | number | boolean",
              "elements": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ],
          "raw": "Array<CheckboxValueType>"
        }
      },
      "options": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "CheckboxOptionType | string",
              "elements": [
                {
                  "name": "CheckboxOptionType"
                },
                {
                  "name": "string"
                }
              ]
            }
          ],
          "raw": "Array<CheckboxOptionType | string>"
        },
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(checkedValue: Array<CheckboxValueType>) => void",
          "signature": {
            "arguments": [
              {
                "name": "checkedValue",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "union",
                      "raw": "string | number | boolean",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "boolean"
                        }
                      ]
                    }
                  ],
                  "raw": "Array<CheckboxValueType>"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        }
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "name": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    },
    "childContext": {
      "checkboxGroup": {
        "type": {
          "name": "any"
        },
        "required": false
      }
    }
  },
  "components/collapse/Collapse.tsx": {
    "description": "",
    "displayName": "Collapse",
    "methods": [
      {
        "name": "renderExpandIcon",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "panelProps",
            "type": null
          },
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderCollapse",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activeKey": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Array<string | number> | string | number",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "union",
                  "raw": "string | number",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "number"
                    }
                  ]
                }
              ],
              "raw": "Array<string | number>"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": ""
      },
      "defaultActiveKey": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Array<string | number> | string | number",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "union",
                  "raw": "string | number",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "number"
                    }
                  ]
                }
              ],
              "raw": "Array<string | number>"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": ""
      },
      "accordion": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "手风琴效果"
      },
      "destroyInactivePanel": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(key: string | string[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "key",
                "type": {
                  "name": "union",
                  "raw": "string | string[]",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "string"
                        }
                      ],
                      "raw": "string[]"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "bordered": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "expandIcon": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(panelProps: PanelProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "panelProps",
                "type": {
                  "name": "PanelProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "expandIconPosition": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'left' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "openAnimation": {
        "defaultValue": {
          "value": "{ ...animation, appear() {} }",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/collapse/CollapsePanel.tsx": {
    "description": "",
    "displayName": "CollapsePanel",
    "methods": [
      {
        "name": "renderCollapsePanel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "key": {
        "required": true,
        "tsType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": ""
      },
      "header": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "showArrow": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "forceRender": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "extra": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      }
    }
  },
  "components/comment/index.tsx": {
    "description": "",
    "displayName": "Comment",
    "methods": [
      {
        "name": "renderNested",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "children",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderComment",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "actions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          ],
          "raw": "Array<React.ReactNode>"
        },
        "description": "List of action items rendered below the comment content"
      },
      "author": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The element to display as the comment author."
      },
      "avatar": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The element to display as the comment avatar - generally an antd Avatar"
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "className of comment"
      },
      "content": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The main content of the comment"
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "Nested comments should be provided as children of the Comment"
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Comment prefix defaults to '.ant-comment'"
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Additional style for the comment"
      },
      "datetime": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "A datetime element containing the time to be displayed"
      }
    }
  },
  "components/config-provider/index.tsx": {
    "description": "",
    "displayName": "ConfigProvider",
    "methods": [
      {
        "name": "getPrefixCls",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "suffixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "customizePrefixCls",
            "optional": true,
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderProvider",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "context",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          },
          {
            "name": "legacyLocale",
            "type": {
              "name": "Locale",
              "alias": "Locale"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "getPopupContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: HTMLElement) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "HTMLElement"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "renderEmpty": {
        "required": false,
        "tsType": {
          "name": "RenderEmptyHandler"
        },
        "description": ""
      },
      "csp": {
        "required": false,
        "tsType": {
          "name": "CSPConfig"
        },
        "description": ""
      },
      "autoInsertSpaceInButton": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "locale": {
        "required": false,
        "tsType": {
          "name": "Locale"
        },
        "description": ""
      },
      "pageHeader": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  ghost: boolean;\n}",
          "signature": {
            "properties": [
              {
                "key": "ghost",
                "value": {
                  "name": "boolean",
                  "required": true
                }
              }
            ]
          }
        },
        "description": ""
      }
    }
  },
  "components/config-provider/renderEmpty.tsx": {
    "description": "",
    "displayName": "renderEmpty",
    "methods": []
  },
  "components/date-picker/InputIcon.tsx": {
    "description": "",
    "displayName": "InputIcon",
    "methods": [],
    "props": {
      "suffixIcon": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "prefixCls": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/date-picker/RangePicker.tsx": {
    "description": "",
    "displayName": "RangePicker",
    "methods": [
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "RangePickerValue",
              "alias": "RangePickerValue"
            }
          },
          {
            "name": "hidePanel",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "savePicker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLSpanElement",
              "alias": "HTMLSpanElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "clearSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "clearHoverValue",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "RangePickerValue",
              "alias": "RangePickerValue"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpenChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleShowDateChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "showDate",
            "type": {
              "name": "RangePickerValue",
              "alias": "RangePickerValue"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "hoverValue",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRangeMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleCalendarInputSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "RangePickerValue",
              "alias": "RangePickerValue"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRangeClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "RangePickerPresetRange",
              "alias": "RangePickerPresetRange"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderFooter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderRangePicker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "allowClear": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "showToday": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "separator": {
        "defaultValue": {
          "value": "'~'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/date-picker/WeekPicker.tsx": {
    "description": "",
    "displayName": "WeekPicker",
    "methods": [
      {
        "name": "saveInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "weekDateRender",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "current",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "union",
              "raw": "moment.Moment | null",
              "elements": [
                {
                  "name": "moment.Moment"
                },
                {
                  "name": "null"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpenChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "clearSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderFooter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "...args",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "any"
                }
              ],
              "raw": "any[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderWeekPicker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "format": {
        "defaultValue": {
          "value": "'gggg-wo'",
          "computed": false
        },
        "required": false
      },
      "allowClear": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/descriptions/Col.tsx": {
    "description": "",
    "displayName": "Col",
    "methods": []
  },
  "components/descriptions/index.tsx": {
    "description": "",
    "displayName": "Descriptions",
    "methods": [
      {
        "name": "getColumn",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "number"
          }
        }
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "bordered": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'middle' | 'small' | 'default'",
          "elements": [
            {
              "name": "literal",
              "value": "'middle'"
            },
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "column": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | Partial<Record<Breakpoint, number>>",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "Partial",
              "elements": [
                {
                  "name": "Record",
                  "elements": [
                    {
                      "name": "Breakpoint"
                    },
                    {
                      "name": "number"
                    }
                  ],
                  "raw": "Record<Breakpoint, number>"
                }
              ],
              "raw": "Partial<Record<Breakpoint, number>>"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "{\n  xxl: 3,\n  xl: 3,\n  lg: 3,\n  md: 3,\n  sm: 2,\n  xs: 1,\n}",
          "computed": false
        }
      },
      "layout": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": ""
      },
      "colon": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/divider/index.tsx": {
    "description": "",
    "displayName": "Divider",
    "methods": []
  },
  "components/dropdown/dropdown-button.tsx": {
    "description": "",
    "displayName": "DropdownButton",
    "methods": [
      {
        "name": "renderButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  getPopupContainer: getContextPopupContainer,\n  getPrefixCls,\n}: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'primary' | 'ghost' | 'dashed'",
          "elements": [
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'ghost'"
            },
            {
              "name": "literal",
              "value": "'dashed'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "htmlType": {
        "required": false,
        "tsType": {
          "name": "ButtonHTMLType"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLButtonElement>",
          "elements": [
            {
              "name": "HTMLButtonElement"
            }
          ]
        },
        "description": ""
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "@since 3.17.0"
      },
      "href": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "placement": {
        "defaultValue": {
          "value": "'bottomRight'",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "ButtonGroupProps",
      "DropDownProps"
    ]
  },
  "components/empty/empty.tsx": {
    "description": "",
    "displayName": "Empty",
    "methods": []
  },
  "components/empty/index.tsx": {
    "description": "",
    "displayName": "Empty",
    "methods": [],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "imageStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "@since 3.16.0"
      },
      "image": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "description": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      }
    }
  },
  "components/empty/simple.tsx": {
    "description": "",
    "displayName": "Simple",
    "methods": []
  },
  "components/grid/col.tsx": {
    "description": "",
    "displayName": "Col",
    "methods": [
      {
        "name": "renderCol",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "span": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "order": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "push": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "pull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "xs": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "sm": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "md": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "lg": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "xl": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "xxl": {
        "type": {
          "name": "custom",
          "raw": "objectOrNumber"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "ColSpanType | ColSize",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "ColSize"
            }
          ]
        }
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/icon/index.tsx": {
    "description": "",
    "displayName": "Icon",
    "methods": []
  },
  "components/input/Group.tsx": {
    "description": "",
    "displayName": "Group",
    "methods": []
  },
  "components/input/Password.tsx": {
    "description": "",
    "displayName": "Password",
    "methods": [
      {
        "name": "onVisibleChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getIcon",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "instance",
            "type": {
              "name": "Input",
              "alias": "Input"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "select",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "inputPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'ant-input'",
          "computed": false
        }
      },
      "action": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'click'",
          "computed": false
        }
      },
      "visibilityToggle": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "prefixCls": {
        "defaultValue": {
          "value": "'ant-input-password'",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "InputProps"
    ]
  },
  "components/input/ResizableTextArea.tsx": {
    "description": "",
    "displayName": "ResizableTextArea",
    "methods": [
      {
        "name": "saveTextArea",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "textArea",
            "type": {
              "name": "HTMLTextAreaElement",
              "alias": "HTMLTextAreaElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "resizeOnNextFrame",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "resizeTextarea",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTextArea",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ]
  },
  "components/input/Search.tsx": {
    "description": "",
    "displayName": "Search",
    "methods": [
      {
        "name": "saveInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "Input",
              "alias": "Input"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onSearch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "union",
              "raw": "React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                },
                {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderLoading",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderSuffix",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderAddonAfter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderSearch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "inputPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onSearch": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  value: string,\n  event?:\n    | React.ChangeEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLElement>\n    | React.KeyboardEvent<HTMLInputElement>,\n) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "event",
                "type": {
                  "name": "union",
                  "raw": "React.ChangeEvent<HTMLInputElement>\n| React.MouseEvent<HTMLElement>\n| React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "ReactChangeEvent",
                      "raw": "React.ChangeEvent<HTMLInputElement>",
                      "elements": [
                        {
                          "name": "HTMLInputElement"
                        }
                      ]
                    },
                    {
                      "name": "ReactMouseEvent",
                      "raw": "React.MouseEvent<HTMLElement>",
                      "elements": [
                        {
                          "name": "HTMLElement"
                        }
                      ]
                    },
                    {
                      "name": "ReactKeyboardEvent",
                      "raw": "React.KeyboardEvent<HTMLInputElement>",
                      "elements": [
                        {
                          "name": "HTMLInputElement"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "enterButton": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    },
    "composes": [
      "InputProps"
    ]
  },
  "components/input/TextArea.tsx": {
    "description": "",
    "displayName": "TextArea",
    "methods": [
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "callback",
            "optional": true,
            "type": {
              "name": "signature",
              "type": "function",
              "raw": "() => void",
              "signature": {
                "arguments": [],
                "return": {
                  "name": "void"
                }
              }
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveTextArea",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "resizableTextArea",
            "type": {
              "name": "ResizableTextArea",
              "alias": "ResizableTextArea"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveClearableInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "clearableInput",
            "type": {
              "name": "ClearableLabeledInput",
              "alias": "ClearableLabeledInput"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLTextAreaElement>",
              "elements": [
                {
                  "name": "HTMLTextAreaElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactKeyboardEvent",
              "raw": "React.KeyboardEvent<HTMLTextAreaElement>",
              "elements": [
                {
                  "name": "HTMLTextAreaElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleReset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement, MouseEvent>",
              "elements": [
                {
                  "name": "HTMLElement"
                },
                {
                  "name": "MouseEvent"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderTextArea",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderComponent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "autosize": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | AutoSizeType",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "AutoSizeType"
            }
          ]
        },
        "description": ""
      },
      "autoSize": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | AutoSizeType",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "AutoSizeType"
            }
          ]
        },
        "description": ""
      },
      "onPressEnter": {
        "required": false,
        "tsType": {
          "name": "ReactKeyboardEventHandler",
          "raw": "React.KeyboardEventHandler<HTMLTextAreaElement>",
          "elements": [
            {
              "name": "HTMLTextAreaElement"
            }
          ]
        },
        "description": ""
      },
      "allowClear": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/input-number/index.tsx": {
    "description": "",
    "displayName": "InputNumber",
    "methods": [
      {
        "name": "saveInputNumber",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "inputNumberRef",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderInputNumber",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "min": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "max": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "step": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "tabIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: number | undefined) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "union",
                  "raw": "number | undefined",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "undefined"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'large' | 'small' | 'default'",
          "elements": [
            {
              "name": "literal",
              "value": "'large'"
            },
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            }
          ]
        },
        "description": ""
      },
      "formatter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: number | string | undefined) => string",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "union",
                  "raw": "number | string | undefined",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "string"
                    },
                    {
                      "name": "undefined"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "string"
            }
          }
        },
        "description": ""
      },
      "parser": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(displayValue: string | undefined) => number | string",
          "signature": {
            "arguments": [
              {
                "name": "displayValue",
                "type": {
                  "name": "union",
                  "raw": "string | undefined",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "undefined"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "decimalSeparator": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "name": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "precision": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "onPressEnter": {
        "required": false,
        "tsType": {
          "name": "ReactKeyboardEventHandler",
          "raw": "React.KeyboardEventHandler<HTMLInputElement>",
          "elements": [
            {
              "name": "HTMLInputElement"
            }
          ]
        },
        "description": ""
      }
    },
    "composes": [
      "Omit"
    ]
  },
  "components/layout/Sider.tsx": {
    "description": "",
    "displayName": "Sider",
    "methods": []
  },
  "components/layout/layout.tsx": {
    "description": "",
    "displayName": "BasicLayout",
    "methods": [
      {
        "name": "getSiderHook",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "hasSider": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "tagName": {
        "required": true,
        "tsType": {
          "name": "union",
          "raw": "'header' | 'footer' | 'main' | 'section'",
          "elements": [
            {
              "name": "literal",
              "value": "'header'"
            },
            {
              "name": "literal",
              "value": "'footer'"
            },
            {
              "name": "literal",
              "value": "'main'"
            },
            {
              "name": "literal",
              "value": "'section'"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/list/index.tsx": {
    "description": "",
    "displayName": "List",
    "methods": [
      {
        "name": "triggerPaginationEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "eventName",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "isSomethingAfterLastItem",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderEmpty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "renderEmpty",
            "type": {
              "name": "RenderEmptyHandler",
              "alias": "RenderEmptyHandler"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls, renderEmpty }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "bordered": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "dataSource": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "T"
            }
          ],
          "raw": "T[]"
        },
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "extra": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "grid": {
        "required": false,
        "tsType": {
          "name": "ListGridType"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "itemLayout": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": ""
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | SpinProps",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "SpinProps"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loadMore": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "pagination": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "PaginationConfig | false",
          "elements": [
            {
              "name": "PaginationConfig"
            },
            {
              "name": "literal",
              "value": "false"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "rowKey": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "((item: T) => string) | string",
          "elements": [
            {
              "name": "unknown"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": ""
      },
      "renderItem": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(item: T, index: number) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "item",
                "type": {
                  "name": "T"
                }
              },
              {
                "name": "index",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'default' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": ""
      },
      "split": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "header": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "footer": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "locale": {
        "required": false,
        "tsType": {
          "name": "ListLocale"
        },
        "description": ""
      }
    },
    "childContext": {
      "grid": {
        "type": {
          "name": "any"
        },
        "required": false
      },
      "itemLayout": {
        "type": {
          "name": "string"
        },
        "required": false
      }
    }
  },
  "components/locale-provider/LocaleReceiver.tsx": {
    "description": "",
    "displayName": "LocaleReceiver",
    "methods": [
      {
        "name": "getLocale",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getLocaleCode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "componentName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'global'",
          "computed": false
        }
      },
      "defaultLocale": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "object | Function",
          "elements": [
            {
              "name": "object"
            },
            {
              "name": "Function"
            }
          ]
        },
        "description": ""
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(locale: object, localeCode?: string, fullLocale?: object) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "locale",
                "type": {
                  "name": "object"
                }
              },
              {
                "name": "localeCode",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "fullLocale",
                "type": {
                  "name": "object"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      }
    },
    "context": {
      "antLocale": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "components/locale-provider/index.tsx": {
    "description": "",
    "displayName": "LocaleProvider",
    "methods": [],
    "props": {
      "locale": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Locale"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "_ANT_MARK__": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    },
    "childContext": {
      "antLocale": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "components/mention/index.tsx": {
    "description": "",
    "displayName": "Mention",
    "methods": [
      {
        "name": "mentionRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ele",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onSearchChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "prefix",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "editorState",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ev",
            "type": {
              "name": "ReactFocusEvent",
              "raw": "React.FocusEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ev",
            "type": {
              "name": "ReactFocusEvent",
              "raw": "React.FocusEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "defaultSearchChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "renderMention",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "suggestionStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "defaultSuggestions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "union",
              "raw": "React.ReactElement<{ value?: string }> | string",
              "elements": [
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<{ value?: string }>",
                  "elements": [
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{ value?: string }",
                      "signature": {
                        "properties": [
                          {
                            "key": "value",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "string"
                }
              ]
            }
          ],
          "raw": "Array<SuggestionItme>"
        },
        "description": ""
      },
      "suggestions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "ReactReactElement",
              "raw": "React.ReactElement<any>",
              "elements": [
                {
                  "name": "any"
                }
              ]
            }
          ],
          "raw": "Array<React.ReactElement<any>>"
        },
        "description": ""
      },
      "onSearchChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string, trigger: string) => any",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "trigger",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "any"
            }
          }
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(contentState: any) => void",
          "signature": {
            "arguments": [
              {
                "name": "contentState",
                "type": {
                  "name": "any"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "notFoundContent": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "",
        "defaultValue": {
          "value": "'No matches found'",
          "computed": false
        }
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "multiLines": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "prefix": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | string[]",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          ]
        },
        "description": ""
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "getSuggestionContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: Element) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "Element"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      },
      "onFocus": {
        "required": false,
        "tsType": {
          "name": "ReactFocusEventHandler",
          "raw": "React.FocusEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "ReactFocusEventHandler",
          "raw": "React.FocusEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(suggestion: string, data?: any) => void",
          "signature": {
            "arguments": [
              {
                "name": "suggestion",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "data",
                "type": {
                  "name": "any"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "readOnly": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'top' | 'bottom'",
          "elements": [
            {
              "name": "literal",
              "value": "'top'"
            },
            {
              "name": "literal",
              "value": "'bottom'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      }
    }
  },
  "components/mentions/index.tsx": {
    "description": "",
    "displayName": "Mentions",
    "methods": [
      {
        "name": "getMentions",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "config",
            "optional": true,
            "type": {
              "name": "MentionsConfig",
              "alias": "MentionsConfig"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "MentionsEntity"
              }
            ],
            "raw": "MentionsEntity[]"
          }
        }
      },
      {
        "name": "onFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "...args",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "...args",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getNotFoundContent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "renderEmpty",
            "type": {
              "name": "RenderEmptyHandler",
              "alias": "RenderEmptyHandler"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getFilterOption",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "any"
          }
        }
      },
      {
        "name": "saveMentions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "RcMentions"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMentions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls, renderEmpty }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    },
    "composes": [
      "RcMentionsProps"
    ]
  },
  "components/menu/MenuItem.tsx": {
    "description": "",
    "displayName": "MenuItem",
    "methods": [
      {
        "name": "onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveMenuItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "menuItem",
            "type": {
              "name": "this"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ siderCollapsed }: SiderContextProps",
            "type": {
              "name": "SiderContextProps",
              "alias": "SiderContextProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "rootPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "level": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(param: ClickParam) => void",
          "signature": {
            "arguments": [
              {
                "name": "param",
                "type": {
                  "name": "ClickParam"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onMouseEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: { key: string; domEvent: MouseEvent }) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ key: string; domEvent: MouseEvent }",
                  "signature": {
                    "properties": [
                      {
                        "key": "key",
                        "value": {
                          "name": "string",
                          "required": true
                        }
                      },
                      {
                        "key": "domEvent",
                        "value": {
                          "name": "MouseEvent",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onMouseLeave": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: { key: string; domEvent: MouseEvent }) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ key: string; domEvent: MouseEvent }",
                  "signature": {
                    "properties": [
                      {
                        "key": "key",
                        "value": {
                          "name": "string",
                          "required": true
                        }
                      },
                      {
                        "key": "domEvent",
                        "value": {
                          "name": "MouseEvent",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    },
    "composes": [
      "Omit"
    ]
  },
  "components/menu/SubMenu.tsx": {
    "description": "",
    "displayName": "SubMenu",
    "methods": [
      {
        "name": "onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveSubMenu",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "subMenu",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "rootPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "onTitleClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: TitleEventEntity) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "TitleEventEntity"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onTitleMouseEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: TitleEventEntity) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "TitleEventEntity"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onTitleMouseLeave": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: TitleEventEntity) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "TitleEventEntity"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "popupOffset": {
        "required": false,
        "tsType": {
          "name": "tuple",
          "raw": "[number, number]",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": ""
      },
      "popupClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    },
    "context": {
      "antdMenuTheme": {
        "type": {
          "name": "string"
        },
        "required": false
      }
    }
  },
  "components/menu/index.tsx": {
    "description": "",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "MenuTheme"
        },
        "description": ""
      },
      "mode": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'vertical' | 'vertical-left' | 'vertical-right' | 'horizontal' | 'inline'",
          "elements": [
            {
              "name": "literal",
              "value": "'vertical'"
            },
            {
              "name": "literal",
              "value": "'vertical-left'"
            },
            {
              "name": "literal",
              "value": "'vertical-right'"
            },
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'inline'"
            }
          ]
        },
        "description": ""
      },
      "selectable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "selectedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": ""
      },
      "defaultSelectedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": ""
      },
      "openKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": ""
      },
      "defaultOpenKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": ""
      },
      "onOpenChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(openKeys: string[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "openKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(param: SelectParam) => void",
          "signature": {
            "arguments": [
              {
                "name": "param",
                "type": {
                  "name": "SelectParam"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDeselect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(param: SelectParam) => void",
          "signature": {
            "arguments": [
              {
                "name": "param",
                "type": {
                  "name": "SelectParam"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(param: ClickParam) => void",
          "signature": {
            "arguments": [
              {
                "name": "param",
                "type": {
                  "name": "ClickParam"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "openAnimation": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "openTransitionName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "motion": {
        "required": false,
        "tsType": {
          "name": "Object"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "multiple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "inlineIndent": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "inlineCollapsed": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "subMenuCloseDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "subMenuOpenDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "focusable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onMouseEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: MouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "MouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "getPopupContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: HTMLElement) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "HTMLElement"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      },
      "overflowedIndicator": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "forceSubMenuRender": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/modal/ActionButton.tsx": {
    "description": "",
    "displayName": "ActionButton",
    "methods": [
      {
        "name": "onClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "required": false,
        "tsType": {
          "name": "ButtonType"
        },
        "description": ""
      },
      "actionFn": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(...args: any[]) => any | PromiseLike<any>",
          "signature": {
            "arguments": [
              {
                "name": "args",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "any"
                    }
                  ],
                  "raw": "any[]"
                },
                "rest": true
              }
            ],
            "return": {
              "name": "union",
              "raw": "any | PromiseLike<any>",
              "elements": [
                {
                  "name": "any"
                },
                {
                  "name": "PromiseLike",
                  "elements": [
                    {
                      "name": "any"
                    }
                  ],
                  "raw": "PromiseLike<any>"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "closeModal": {
        "required": true,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "buttonProps": {
        "required": false,
        "tsType": {
          "name": "NativeButtonProps"
        },
        "description": ""
      }
    }
  },
  "components/modal/Modal.tsx": {
    "description": "",
    "displayName": "Modal",
    "methods": [
      {
        "name": "handleCancel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleOk",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderFooter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "locale",
            "type": {
              "name": "ModalLocale",
              "alias": "ModalLocale"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderModal",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  getPopupContainer: getContextPopupContainer,\n  getPrefixCls,\n}: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "onOk": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "点击确定回调",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        }
      },
      "onCancel": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "点击模态框右上角叉、取消按钮、Props.maskClosable 值为 true 时的遮罩层或键盘按下 Esc 时的回调",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        }
      },
      "okText": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "确认按钮文字",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }
      },
      "cancelText": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "取消按钮文字",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "垂直居中",
        "tsType": {
          "name": "boolean"
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "宽度",
        "tsType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "defaultValue": {
          "value": "520",
          "computed": false
        }
      },
      "confirmLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "确定按钮 loading",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "对话框是否可见",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "footer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "底部内容",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "标题",
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      "closable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "是否显示右上角的关闭按钮",
        "tsType": {
          "name": "boolean"
        }
      },
      "closeIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }
      },
      "afterClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "okType": {
        "required": false,
        "tsType": {
          "name": "ButtonType"
        },
        "description": "确认按钮类型",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "maskClosable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "点击蒙层是否允许关闭"
      },
      "forceRender": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "强制渲染 Modal"
      },
      "okButtonProps": {
        "required": false,
        "tsType": {
          "name": "NativeButtonProps"
        },
        "description": ""
      },
      "cancelButtonProps": {
        "required": false,
        "tsType": {
          "name": "NativeButtonProps"
        },
        "description": ""
      },
      "destroyOnClose": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "wrapClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "maskTransitionName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'fade'",
          "computed": false
        }
      },
      "transitionName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'zoom'",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "getContainer": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | HTMLElement | getContainerFunc | false | null",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "HTMLElement"
            },
            {
              "name": "signature",
              "type": "function",
              "raw": "() => HTMLElement",
              "signature": {
                "arguments": [],
                "return": {
                  "name": "HTMLElement"
                }
              }
            },
            {
              "name": "literal",
              "value": "false"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      },
      "zIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "bodyStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "maskStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "mask": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "keyboard": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "wrapProps": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      }
    }
  },
  "components/page-header/index.tsx": {
    "description": "",
    "displayName": "PageHeader",
    "methods": [],
    "props": {
      "backIcon": {
        "defaultValue": {
          "value": "<Icon type=\"arrow-left\" />",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/pagination/MiniSelect.tsx": {
    "description": "",
    "displayName": "MiniSelect",
    "methods": []
  },
  "components/pagination/Pagination.tsx": {
    "description": "",
    "displayName": "Pagination",
    "methods": [
      {
        "name": "getIconsProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderPagination",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "contextLocale",
            "type": {
              "name": "any",
              "alias": "PaginationLocale"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "total": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "defaultCurrent": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "current": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "defaultPageSize": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "pageSize": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(page: number, pageSize?: number) => void",
          "signature": {
            "arguments": [
              {
                "name": "page",
                "type": {
                  "name": "number"
                }
              },
              {
                "name": "pageSize",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "hideOnSinglePage": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "showSizeChanger": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "pageSizeOptions": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      },
      "onShowSizeChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(current: number, size: number) => void",
          "signature": {
            "arguments": [
              {
                "name": "current",
                "type": {
                  "name": "number"
                }
              },
              {
                "name": "size",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "showQuickJumper": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | { goButton?: React.ReactNode }",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{ goButton?: React.ReactNode }",
              "signature": {
                "properties": [
                  {
                    "key": "goButton",
                    "value": {
                      "name": "ReactReactNode",
                      "raw": "React.ReactNode",
                      "required": false
                    }
                  }
                ]
              }
            }
          ]
        },
        "description": ""
      },
      "showTotal": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(total: number, range: [number, number]) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "total",
                "type": {
                  "name": "number"
                }
              },
              {
                "name": "range",
                "type": {
                  "name": "tuple",
                  "raw": "[number, number]",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "number"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "simple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "locale": {
        "required": false,
        "tsType": {
          "name": "Object"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "selectPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "itemRender": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  page: number,\n  type: 'page' | 'prev' | 'next' | 'jump-prev' | 'jump-next',\n  originalElement: React.ReactElement<HTMLElement>,\n) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "page",
                "type": {
                  "name": "number"
                }
              },
              {
                "name": "type",
                "type": {
                  "name": "union",
                  "raw": "'page' | 'prev' | 'next' | 'jump-prev' | 'jump-next'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'page'"
                    },
                    {
                      "name": "literal",
                      "value": "'prev'"
                    },
                    {
                      "name": "literal",
                      "value": "'next'"
                    },
                    {
                      "name": "literal",
                      "value": "'jump-prev'"
                    },
                    {
                      "name": "literal",
                      "value": "'jump-next'"
                    }
                  ]
                }
              },
              {
                "name": "originalElement",
                "type": {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "role": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "showLessItems": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/popconfirm/index.tsx": {
    "description": "",
    "displayName": "Popconfirm",
    "methods": [
      {
        "name": "getPopupDomNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onConfirm",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onCancel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onVisibleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setVisible",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          },
          {
            "name": "e",
            "optional": true,
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLButtonElement>",
              "elements": [
                {
                  "name": "HTMLButtonElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveTooltip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "popconfirmLocale",
            "type": {
              "name": "PopconfirmLocale",
              "alias": "PopconfirmLocale"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderConfirm",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "title": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onConfirm": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e?: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onCancel": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e?: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "okText": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "okType": {
        "required": false,
        "tsType": {
          "name": "ButtonType"
        },
        "description": "",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "cancelText": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "okButtonProps": {
        "required": false,
        "tsType": {
          "name": "NativeButtonProps"
        },
        "description": ""
      },
      "cancelButtonProps": {
        "required": false,
        "tsType": {
          "name": "NativeButtonProps"
        },
        "description": ""
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "",
        "defaultValue": {
          "value": "<Icon type=\"exclamation-circle\" theme=\"filled\" />",
          "computed": false
        }
      },
      "onVisibleChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(visible: boolean, e?: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "visible",
                "type": {
                  "name": "boolean"
                }
              },
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "transitionName": {
        "defaultValue": {
          "value": "'zoom-big'",
          "computed": false
        },
        "required": false
      },
      "placement": {
        "defaultValue": {
          "value": "'top'",
          "computed": false
        },
        "required": false
      },
      "trigger": {
        "defaultValue": {
          "value": "'click'",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "AbstractTooltipProps"
    ]
  },
  "components/popover/index.tsx": {
    "description": "",
    "displayName": "Popover",
    "methods": [
      {
        "name": "getPopupDomNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveTooltip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderPopover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "content": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "placement": {
        "defaultValue": {
          "value": "'top'",
          "computed": false
        },
        "required": false
      },
      "transitionName": {
        "defaultValue": {
          "value": "'zoom-big'",
          "computed": false
        },
        "required": false
      },
      "trigger": {
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        },
        "required": false
      },
      "mouseEnterDelay": {
        "defaultValue": {
          "value": "0.1",
          "computed": false
        },
        "required": false
      },
      "mouseLeaveDelay": {
        "defaultValue": {
          "value": "0.1",
          "computed": false
        },
        "required": false
      },
      "overlayStyle": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "AbstractTooltipProps"
    ]
  },
  "components/progress/Circle.tsx": {
    "description": "",
    "displayName": "Circle",
    "methods": []
  },
  "components/progress/Line.tsx": {
    "description": "",
    "displayName": "Line",
    "methods": []
  },
  "components/radio/group.tsx": {
    "description": "",
    "displayName": "RadioGroup",
    "methods": [
      {
        "name": "onRadioChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ev",
            "type": {
              "name": "RadioChangeEvent",
              "alias": "RadioChangeEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderGroup",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "buttonStyle": {
        "defaultValue": {
          "value": "'outline'",
          "computed": false
        },
        "required": false
      }
    },
    "childContext": {
      "radioGroup": {
        "type": {
          "name": "any"
        },
        "required": false
      }
    }
  },
  "components/radio/radio.tsx": {
    "description": "",
    "displayName": "Radio",
    "methods": [
      {
        "name": "saveCheckbox",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "RadioChangeEvent",
              "alias": "RadioChangeEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderRadio",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "defaultValue": {
          "value": "'radio'",
          "computed": false
        },
        "required": false
      }
    },
    "context": {
      "radioGroup": {
        "type": {
          "name": "any"
        },
        "required": false
      }
    }
  },
  "components/radio/radioButton.tsx": {
    "description": "",
    "displayName": "RadioButton",
    "methods": [
      {
        "name": "renderRadioButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "context": {
      "radioGroup": {
        "type": {
          "name": "any"
        },
        "required": false
      }
    }
  },
  "components/rate/index.tsx": {
    "description": "",
    "displayName": "Rate",
    "methods": [
      {
        "name": "saveRate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "characterRender",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          },
          {
            "name": "{ index }: RateNodeProps",
            "type": {
              "name": "RateNodeProps",
              "alias": "RateNodeProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderRate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "character": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "defaultValue": {
          "value": "<Icon type=\"star\" theme=\"filled\" />",
          "computed": false
        }
      },
      "count": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "allowHalf": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "allowClear": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "tooltips": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: number) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onHoverChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: number) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      }
    }
  },
  "components/result/index.tsx": {
    "description": "",
    "displayName": "Result",
    "methods": [],
    "props": {
      "status": {
        "defaultValue": {
          "value": "'info'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/result/noFound.tsx": {
    "description": "",
    "displayName": "NoFound",
    "methods": []
  },
  "components/result/serverError.tsx": {
    "description": "",
    "displayName": "ServerError",
    "methods": []
  },
  "components/result/unauthorized.tsx": {
    "description": "",
    "displayName": "Unauthorized",
    "methods": []
  },
  "components/skeleton/Avatar.tsx": {
    "description": "",
    "displayName": "SkeletonAvatar",
    "methods": [],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "object"
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'large' | 'small' | 'default' | number",
          "elements": [
            {
              "name": "literal",
              "value": "'large'"
            },
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'large'",
          "computed": false
        }
      },
      "shape": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'circle' | 'square'",
          "elements": [
            {
              "name": "literal",
              "value": "'circle'"
            },
            {
              "name": "literal",
              "value": "'square'"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/skeleton/Paragraph.tsx": {
    "description": "",
    "displayName": "Paragraph",
    "methods": [
      {
        "name": "getWidth",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "object"
        },
        "description": ""
      },
      "width": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "widthUnit | Array<widthUnit>",
          "elements": [
            {
              "name": "union",
              "raw": "number | string",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "union",
                  "raw": "number | string",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "string"
                    }
                  ]
                }
              ],
              "raw": "Array<widthUnit>"
            }
          ]
        },
        "description": ""
      },
      "rows": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      }
    }
  },
  "components/skeleton/Title.tsx": {
    "description": "",
    "displayName": "Title",
    "methods": [],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "object"
        },
        "description": ""
      },
      "width": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": ""
      }
    }
  },
  "components/skeleton/index.tsx": {
    "description": "",
    "displayName": "Skeleton",
    "methods": [
      {
        "name": "renderSkeleton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "active": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "avatar": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "SkeletonAvatarProps | boolean",
          "elements": [
            {
              "name": "SkeletonAvatarProps"
            },
            {
              "name": "boolean"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "SkeletonTitleProps | boolean",
          "elements": [
            {
              "name": "SkeletonTitleProps"
            },
            {
              "name": "boolean"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "paragraph": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "SkeletonParagraphProps | boolean",
          "elements": [
            {
              "name": "SkeletonParagraphProps"
            },
            {
              "name": "boolean"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "components/slider/index.tsx": {
    "description": "",
    "displayName": "Slider",
    "methods": [
      {
        "name": "toggleTooltipVisible",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleWithTooltip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  tooltipPrefixCls,\n  prefixCls,\n  info: { value, dragging, index, ...restProps },\n}",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "saveSlider",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSlider",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "tooltipPrefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "range": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "reverse": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "min": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "max": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "step": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | null",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      },
      "marks": {
        "required": false,
        "tsType": {
          "name": "SliderMarks"
        },
        "description": ""
      },
      "dots": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | [number, number]",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "tuple",
              "raw": "[number, number]",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "number"
                }
              ]
            }
          ]
        },
        "description": ""
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | [number, number]",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "tuple",
              "raw": "[number, number]",
              "elements": [
                {
                  "name": "number"
                },
                {
                  "name": "number"
                }
              ]
            }
          ]
        },
        "description": ""
      },
      "included": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "vertical": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: SliderValue) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "union",
                  "raw": "number | [number, number]",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "tuple",
                      "raw": "[number, number]",
                      "elements": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "number"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onAfterChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: SliderValue) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "union",
                  "raw": "number | [number, number]",
                  "elements": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "tuple",
                      "raw": "[number, number]",
                      "elements": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "number"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "tipFormatter": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "null | ((value: number) => React.ReactNode)",
          "elements": [
            {
              "name": "null"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "(value: number) {\n  return value.toString();\n}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "tooltipVisible": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "tooltipPlacement": {
        "required": false,
        "tsType": {
          "name": "TooltipPlacement"
        },
        "description": ""
      },
      "getTooltipPopupContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: HTMLElement) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "HTMLElement"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      }
    }
  },
  "components/statistic/Countdown.tsx": {
    "description": "",
    "displayName": "Countdown",
    "methods": [
      {
        "name": "syncTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "startTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "stopTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "formatCountdown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "countdownValueType",
              "alias": "countdownValueType"
            }
          },
          {
            "name": "config",
            "type": {
              "name": "FormatConfig",
              "alias": "FormatConfig"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "valueRender",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "ReactReactElement",
              "raw": "React.ReactElement<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "value": {
        "required": false,
        "tsType": {
          "name": "countdownValueType"
        },
        "description": ""
      },
      "format": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "'HH:mm:ss'",
          "computed": false
        }
      },
      "onFinish": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    },
    "composes": [
      "StatisticProps"
    ]
  },
  "components/statistic/Number.tsx": {
    "description": "",
    "displayName": "StatisticNumber",
    "methods": []
  },
  "components/statistic/Statistic.tsx": {
    "description": "",
    "displayName": "Statistic",
    "methods": [],
    "props": {
      "decimalSeparator": {
        "defaultValue": {
          "value": "'.'",
          "computed": false
        },
        "required": false
      },
      "groupSeparator": {
        "defaultValue": {
          "value": "','",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/steps/index.tsx": {
    "description": "",
    "displayName": "Steps",
    "methods": [
      {
        "name": "renderSteps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "iconPrefix": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "current": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "type": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'navigation'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'navigation'"
            }
          ]
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": ""
      },
      "initial": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "labelPlacement": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": ""
      },
      "progressDot": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | Function",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "Function"
            }
          ]
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'small'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'small'"
            }
          ]
        },
        "description": ""
      },
      "status": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'wait' | 'process' | 'finish' | 'error'",
          "elements": [
            {
              "name": "literal",
              "value": "'wait'"
            },
            {
              "name": "literal",
              "value": "'process'"
            },
            {
              "name": "literal",
              "value": "'finish'"
            },
            {
              "name": "literal",
              "value": "'error'"
            }
          ]
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(current: number) => void",
          "signature": {
            "arguments": [
              {
                "name": "current",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    }
  },
  "components/switch/index.tsx": {
    "description": "",
    "displayName": "Switch",
    "methods": [
      {
        "name": "saveSwitch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "RcSwitch"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSwitch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "size": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['small', 'default', 'large']) as PropTypes.Requireable<\n  SwitchProps['size']\n>"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "'small' | 'default'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'default'"
            }
          ]
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "checked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "defaultChecked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(checked: boolean, event: MouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "checked",
                "type": {
                  "name": "boolean"
                }
              },
              {
                "name": "event",
                "type": {
                  "name": "MouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(checked: boolean, event: MouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "checked",
                "type": {
                  "name": "boolean"
                }
              },
              {
                "name": "event",
                "type": {
                  "name": "MouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "checkedChildren": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "unCheckedChildren": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/table/Column.tsx": {
    "description": "",
    "displayName": "Column",
    "methods": []
  },
  "components/table/ColumnGroup.tsx": {
    "description": "",
    "displayName": "ColumnGroup",
    "methods": [],
    "props": {
      "title": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/table/FilterDropdownMenuWrapper.tsx": {
    "description": "",
    "displayName": "FilterDropdownMenuWrapper",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  "components/table/SelectionBox.tsx": {
    "description": "",
    "displayName": "SelectionBox",
    "methods": [
      {
        "name": "getCheckState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "SelectionBoxProps",
              "alias": "SelectionBoxProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "subscribe",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ]
  },
  "components/table/SelectionCheckboxAll.tsx": {
    "description": "",
    "displayName": "SelectionCheckboxAll",
    "methods": [
      {
        "name": "setCheckState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "SelectionCheckboxAllProps",
              "elements": [
                {
                  "name": "T"
                }
              ],
              "raw": "SelectionCheckboxAllProps<T>",
              "alias": "SelectionCheckboxAllProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectAllChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "CheckboxChangeEvent",
              "alias": "CheckboxChangeEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "subscribe",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMenus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selections",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "SelectionItem"
                }
              ],
              "raw": "SelectionItem[]"
            }
          }
        ],
        "returns": null
      }
    ]
  },
  "components/table/Table.tsx": {
    "description": "",
    "displayName": "withStore(Table)",
    "methods": [
      {
        "name": "setCheckboxPropsCache",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cache",
            "type": {
              "name": "CheckboxPropsCache",
              "alias": "CheckboxPropsCache"
            }
          }
        ],
        "returns": null
      }
    ]
  },
  "components/table/filterDropdown.tsx": {
    "description": "",
    "displayName": "FilterMenu",
    "methods": [
      {
        "name": "getDropdownVisible",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setNeverShown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": {
              "name": "ColumnProps",
              "elements": [
                {
                  "name": "T"
                }
              ],
              "raw": "ColumnProps<T>",
              "alias": "ColumnProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setSelectedKeys",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ selectedKeys }: { selectedKeys?: React.Key[] }",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{ selectedKeys?: React.Key[] }",
              "signature": {
                "properties": [
                  {
                    "key": "selectedKeys",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "ReactKey",
                          "raw": "React.Key"
                        }
                      ],
                      "raw": "React.Key[]",
                      "required": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setVisible",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClearFilters",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleConfirm",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onVisibleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleMenuItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "info",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{ keyPath: React.Key[]; key: React.Key }",
              "signature": {
                "properties": [
                  {
                    "key": "keyPath",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "ReactKey",
                          "raw": "React.Key"
                        }
                      ],
                      "raw": "React.Key[]",
                      "required": true
                    }
                  },
                  {
                    "key": "key",
                    "value": {
                      "name": "ReactKey",
                      "raw": "React.Key",
                      "required": true
                    }
                  }
                ]
              }
            }
          }
        ],
        "returns": null
      },
      {
        "name": "hasSubMenu",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "confirmFilter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMenus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "items",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "ColumnFilterItem"
                }
              ],
              "raw": "ColumnFilterItem[]"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactReactElement",
                "raw": "React.ReactElement<any>",
                "elements": [
                  {
                    "name": "any"
                  }
                ]
              }
            ],
            "raw": "React.ReactElement<any>[]"
          }
        }
      },
      {
        "name": "renderFilterIcon",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMenuItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "ColumnFilterItem",
              "alias": "ColumnFilterItem"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "column": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/tabs/TabBar.tsx": {
    "description": "",
    "displayName": "TabBar",
    "methods": [],
    "props": {
      "animated": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "type": {
        "defaultValue": {
          "value": "'line'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/tabs/index.tsx": {
    "description": "",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "removeTab",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "targetKey",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "activeKey",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "createNewTab",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "targetKey",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderTabs",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activeKey": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "defaultActiveKey": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "hideAdd": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(activeKey: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "activeKey",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onTabClick": {
        "required": false,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "onPrevClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "onNextClick": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLElement>",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ]
        },
        "description": ""
      },
      "tabBarExtraContent": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | null",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      },
      "tabBarStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "type": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'line' | 'card' | 'editable-card'",
          "elements": [
            {
              "name": "literal",
              "value": "'line'"
            },
            {
              "name": "literal",
              "value": "'card'"
            },
            {
              "name": "literal",
              "value": "'editable-card'"
            }
          ]
        },
        "description": ""
      },
      "tabPosition": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'top' | 'right' | 'bottom' | 'left'",
          "elements": [
            {
              "name": "literal",
              "value": "'top'"
            },
            {
              "name": "literal",
              "value": "'right'"
            },
            {
              "name": "literal",
              "value": "'bottom'"
            },
            {
              "name": "literal",
              "value": "'left'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'top'",
          "computed": false
        }
      },
      "onEdit": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(targetKey: string | React.MouseEvent<HTMLElement>, action: 'add' | 'remove') => void",
          "signature": {
            "arguments": [
              {
                "name": "targetKey",
                "type": {
                  "name": "union",
                  "raw": "string | React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "ReactMouseEvent",
                      "raw": "React.MouseEvent<HTMLElement>",
                      "elements": [
                        {
                          "name": "HTMLElement"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "name": "action",
                "type": {
                  "name": "union",
                  "raw": "'add' | 'remove'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'add'"
                    },
                    {
                      "name": "literal",
                      "value": "'remove'"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'large' | 'default' | 'small'",
          "elements": [
            {
              "name": "literal",
              "value": "'large'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'small'"
            }
          ]
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "animated": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | { inkBar: boolean; tabPane: boolean }",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{ inkBar: boolean; tabPane: boolean }",
              "signature": {
                "properties": [
                  {
                    "key": "inkBar",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "tabPane",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  }
                ]
              }
            }
          ]
        },
        "description": ""
      },
      "tabBarGutter": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "renderTabBar": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  props: TabsProps,\n  DefaultTabBar: React.ComponentClass<any>,\n) => React.ReactElement<any>",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TabsProps"
                }
              },
              {
                "name": "DefaultTabBar",
                "type": {
                  "name": "ReactComponentClass",
                  "raw": "React.ComponentClass<any>",
                  "elements": [
                    {
                      "name": "any"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "ReactReactElement",
              "raw": "React.ReactElement<any>",
              "elements": [
                {
                  "name": "any"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "destroyInactiveTabPane": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/tag/CheckableTag.tsx": {
    "description": "",
    "displayName": "CheckableTag",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCheckableTag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "checked": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(checked: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "checked",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      }
    }
  },
  "components/tag/index.tsx": {
    "description": "",
    "displayName": "Tag",
    "methods": [
      {
        "name": "getTagStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getTagClassName",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setVisible",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          },
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "isPresetColor",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "renderCloseIcon",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "configProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "color": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "closable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "afterClose": {
        "required": false,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      }
    }
  },
  "components/time-picker/index.tsx": {
    "description": "",
    "displayName": "TimePicker",
    "methods": [
      {
        "name": "getDefaultFormat",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getAllowClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getDefaultLocale",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleOpenClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ open }: { open: boolean }",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{ open: boolean }",
              "signature": {
                "properties": [
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  }
                ]
              }
            }
          }
        ],
        "returns": null
      },
      {
        "name": "saveTimePicker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "timePickerRef",
            "type": {
              "name": "RcTimePicker"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "moment.Moment"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderInputIcon",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderClearIcon",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderTimePicker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "locale",
            "type": {
              "name": "TimePickerLocale",
              "alias": "TimePickerLocale"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'large' | 'default' | 'small'",
          "elements": [
            {
              "name": "literal",
              "value": "'large'"
            },
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'small'"
            }
          ]
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "moment.Moment"
        },
        "description": ""
      },
      "defaultValue": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "moment.Moment | moment.Moment[]",
          "elements": [
            {
              "name": "moment.Moment"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "moment.Moment"
                }
              ],
              "raw": "moment.Moment[]"
            }
          ]
        },
        "description": ""
      },
      "open": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "format": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(time: moment.Moment, timeString: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "time",
                "type": {
                  "name": "moment.Moment"
                }
              },
              {
                "name": "timeString",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onOpenChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(open: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "open",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onAmPmChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(ampm: 'AM' | 'PM') => void",
          "signature": {
            "arguments": [
              {
                "name": "ampm",
                "type": {
                  "name": "union",
                  "raw": "'AM' | 'PM'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'AM'"
                    },
                    {
                      "name": "literal",
                      "value": "'PM'"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "hideDisabledOptions": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabledHours": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => number[]",
          "signature": {
            "arguments": [],
            "return": {
              "name": "Array",
              "elements": [
                {
                  "name": "number"
                }
              ],
              "raw": "number[]"
            }
          }
        },
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "disabledMinutes": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedHour: number) => number[]",
          "signature": {
            "arguments": [
              {
                "name": "selectedHour",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "Array",
              "elements": [
                {
                  "name": "number"
                }
              ],
              "raw": "number[]"
            }
          }
        },
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "disabledSeconds": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedHour: number, selectedMinute: number) => number[]",
          "signature": {
            "arguments": [
              {
                "name": "selectedHour",
                "type": {
                  "name": "number"
                }
              },
              {
                "name": "selectedMinute",
                "type": {
                  "name": "number"
                }
              }
            ],
            "return": {
              "name": "Array",
              "elements": [
                {
                  "name": "number"
                }
              ],
              "raw": "number[]"
            }
          }
        },
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "getPopupContainer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(triggerNode: HTMLElement) => HTMLElement",
          "signature": {
            "arguments": [
              {
                "name": "triggerNode",
                "type": {
                  "name": "HTMLElement"
                }
              }
            ],
            "return": {
              "name": "HTMLElement"
            }
          }
        },
        "description": ""
      },
      "addon": {
        "required": false,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "use12Hours": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "focusOnOpen": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hourStep": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "minuteStep": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "secondStep": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      },
      "allowEmpty": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "allowClear": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "inputReadOnly": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "clearText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "defaultOpenValue": {
        "required": false,
        "tsType": {
          "name": "moment.Moment"
        },
        "description": ""
      },
      "popupClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "popupStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "suffixIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "clearIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "locale": {
        "required": false,
        "tsType": {
          "name": "TimePickerLocale"
        },
        "description": ""
      },
      "align": {
        "defaultValue": {
          "value": "{\n  offset: [0, -2],\n}",
          "computed": false
        },
        "required": false
      },
      "placement": {
        "defaultValue": {
          "value": "'bottomLeft'",
          "computed": false
        },
        "required": false
      },
      "transitionName": {
        "defaultValue": {
          "value": "'slide-up'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/timeline/Timeline.tsx": {
    "description": "",
    "displayName": "Timeline",
    "methods": [
      {
        "name": "renderTimeline",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "pending": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "指定最后一个幽灵节点是否存在或内容"
      },
      "pendingDot": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "reverse": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mode": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'left' | 'alternate' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'alternate'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      }
    }
  },
  "components/timeline/TimelineItem.tsx": {
    "description": "",
    "displayName": "TimelineItem",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "'blue'",
          "computed": false
        },
        "required": false
      },
      "pending": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "position": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/tooltip/index.tsx": {
    "description": "",
    "displayName": "Tooltip",
    "methods": [
      {
        "name": "onVisibleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getPopupDomNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getPlacements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveTooltip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "RcTooltip"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onPopupAlign",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "domNode",
            "type": {
              "name": "HTMLElement",
              "alias": "HTMLElement"
            }
          },
          {
            "name": "align",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "isNoTitle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTooltip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  getPopupContainer: getContextPopupContainer,\n  getPrefixCls,\n}: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "placement": {
        "defaultValue": {
          "value": "'top'",
          "computed": false
        },
        "required": false
      },
      "transitionName": {
        "defaultValue": {
          "value": "'zoom-big-fast'",
          "computed": false
        },
        "required": false
      },
      "mouseEnterDelay": {
        "defaultValue": {
          "value": "0.1",
          "computed": false
        },
        "required": false
      },
      "mouseLeaveDelay": {
        "defaultValue": {
          "value": "0.1",
          "computed": false
        },
        "required": false
      },
      "arrowPointAtCenter": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "autoAdjustOverflow": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/transfer/ListItem.tsx": {
    "description": "",
    "displayName": "ListItem",
    "methods": []
  },
  "components/transfer/index.tsx": {
    "description": "",
    "displayName": "Transfer",
    "methods": [
      {
        "name": "getSelectedKeysName",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getTitles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "transferLocale",
            "type": {
              "name": "TransferLocale",
              "alias": "TransferLocale"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "string"
              }
            ],
            "raw": "string[]"
          }
        }
      },
      {
        "name": "getLocale",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "transferLocale",
            "type": {
              "name": "TransferLocale",
              "alias": "TransferLocale"
            }
          },
          {
            "name": "renderEmpty",
            "type": {
              "name": "RenderEmptyHandler",
              "alias": "RenderEmptyHandler"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "moveTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "moveToLeft",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "moveToRight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onItemSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "selectedKeys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "filteredDataSource",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredDataSource",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRightSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredDataSource",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onLeftItemSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedKeys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onRightItemSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedKeys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "checkAll",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleFilter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftFilter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRightFilter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClear",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleRightClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "selectedKey",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "selectedItem",
            "type": {
              "name": "TransferItem",
              "alias": "TransferItem"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedItem",
            "type": {
              "name": "TransferItem",
              "alias": "TransferItem"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRightSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedItem",
            "type": {
              "name": "TransferItem",
              "alias": "TransferItem"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onLeftItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedKey",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onRightItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectedKey",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleScroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "e",
            "type": {
              "name": "ReactSyntheticEvent",
              "raw": "React.SyntheticEvent<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftScroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactSyntheticEvent",
              "raw": "React.SyntheticEvent<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRightScroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactSyntheticEvent",
              "raw": "React.SyntheticEvent<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          },
          {
            "name": "holder",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleListStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "listStyle",
            "type": {
              "name": "union",
              "raw": "((style: ListStyle) => React.CSSProperties) | React.CSSProperties",
              "elements": [
                {
                  "name": "unknown"
                },
                {
                  "name": "ReactCSSProperties",
                  "raw": "React.CSSProperties"
                }
              ]
            }
          },
          {
            "name": "direction",
            "type": {
              "name": "union",
              "raw": "'left' | 'right'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'left'"
                },
                {
                  "name": "literal",
                  "value": "'right'"
                }
              ],
              "alias": "TransferDirection"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "separateDataSource",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTransfer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "transferLocale",
            "type": {
              "name": "TransferLocale",
              "alias": "TransferLocale"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "boolean"
        }
      },
      "dataSource": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.array as PropTypes.Validator<TransferItem[]>"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "TransferItem"
            }
          ],
          "raw": "TransferItem[]"
        },
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "render": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(item: TransferItem) => RenderResult",
          "signature": {
            "arguments": [
              {
                "name": "item",
                "type": {
                  "name": "TransferItem"
                }
              }
            ],
            "return": {
              "name": "union",
              "raw": "React.ReactElement | RenderResultObject | string | null",
              "elements": [
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement"
                },
                {
                  "name": "RenderResultObject"
                },
                {
                  "name": "string"
                },
                {
                  "name": "null"
                }
              ]
            }
          }
        }
      },
      "targetKeys": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(targetKeys: string[], direction: string, moveKeys: string[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "targetKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "direction",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "moveKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        }
      },
      "listStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "((style: ListStyle) => React.CSSProperties) | React.CSSProperties",
          "elements": [
            {
              "name": "unknown"
            },
            {
              "name": "ReactCSSProperties",
              "raw": "React.CSSProperties"
            }
          ]
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "operationStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "titles": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        }
      },
      "operations": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        }
      },
      "showSearch": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filterOption": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(inputValue: string, item: TransferItem) => boolean",
          "signature": {
            "arguments": [
              {
                "name": "inputValue",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "item",
                "type": {
                  "name": "TransferItem"
                }
              }
            ],
            "return": {
              "name": "boolean"
            }
          }
        }
      },
      "searchPlaceholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "string"
        }
      },
      "notFoundContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }
      },
      "locale": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "object",
          "raw": "{}",
          "signature": {
            "properties": []
          }
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "body": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "footer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        }
      },
      "rowKey": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(record: TransferItem) => string",
          "signature": {
            "arguments": [
              {
                "name": "record",
                "type": {
                  "name": "TransferItem"
                }
              }
            ],
            "return": {
              "name": "string"
            }
          }
        }
      },
      "lazy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "",
        "tsType": {
          "name": "union",
          "raw": "{} | boolean",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{}",
              "signature": {
                "properties": []
              }
            },
            {
              "name": "boolean"
            }
          ]
        }
      },
      "selectedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      },
      "onSelectChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(sourceSelectedKeys: string[], targetSelectedKeys: string[]) => void",
          "signature": {
            "arguments": [
              {
                "name": "sourceSelectedKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "targetSelectedKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onSearchChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(direction: TransferDirection, e: React.ChangeEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "direction",
                "type": {
                  "name": "union",
                  "raw": "'left' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ]
                }
              },
              {
                "name": "e",
                "type": {
                  "name": "ReactChangeEvent",
                  "raw": "React.ChangeEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onSearch": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(direction: TransferDirection, value: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "direction",
                "type": {
                  "name": "union",
                  "raw": "'left' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ]
                }
              },
              {
                "name": "value",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onScroll": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(direction: TransferDirection, e: React.SyntheticEvent<HTMLDivElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "direction",
                "type": {
                  "name": "union",
                  "raw": "'left' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ]
                }
              },
              {
                "name": "e",
                "type": {
                  "name": "ReactSyntheticEvent",
                  "raw": "React.SyntheticEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "HTMLDivElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListBodyProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListBodyProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "showSelectAll": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/transfer/list.tsx": {
    "description": "",
    "displayName": "TransferList",
    "methods": [
      {
        "name": "getCheckStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredItems",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getFilteredItems",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dataSource",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "filterValue",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "signature",
            "type": "object",
            "raw": "{ filteredItems: TransferItem[]; filteredRenderItems: RenderedItem[] }",
            "signature": {
              "properties": [
                {
                  "key": "filteredItems",
                  "value": {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "TransferItem"
                      }
                    ],
                    "raw": "TransferItem[]",
                    "required": true
                  }
                },
                {
                  "key": "filteredRenderItems",
                  "value": {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "RenderedItem"
                      }
                    ],
                    "raw": "RenderedItem[]",
                    "required": true
                  }
                }
              ]
            }
          }
        }
      },
      {
        "name": "getListBody",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "searchPlaceholder",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "filterValue",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "filteredItems",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "notFoundContent",
            "type": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          },
          {
            "name": "bodyDom",
            "type": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          },
          {
            "name": "filteredRenderItems",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "RenderedItem"
                }
              ],
              "raw": "RenderedItem[]"
            }
          },
          {
            "name": "checkedKeys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "renderList",
            "optional": true,
            "type": {
              "name": "signature",
              "type": "function",
              "raw": "(props: TransferListBodyProps) => React.ReactNode",
              "signature": {
                "arguments": [
                  {
                    "name": "props",
                    "type": {
                      "name": "TransferListBodyProps"
                    }
                  }
                ],
                "return": {
                  "name": "ReactReactNode",
                  "raw": "React.ReactNode"
                }
              },
              "alias": "RenderListFunction"
            }
          },
          {
            "name": "showSearch",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          },
          {
            "name": "disabled",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          }
        }
      },
      {
        "name": "getCheckBox",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredItems",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "TransferItem"
                }
              ],
              "raw": "TransferItem[]"
            }
          },
          {
            "name": "onItemSelectAll",
            "type": {
              "name": "signature",
              "type": "function",
              "raw": "(dataSource: string[], checkAll: boolean) => void",
              "signature": {
                "arguments": [
                  {
                    "name": "dataSource",
                    "type": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "string"
                        }
                      ],
                      "raw": "string[]"
                    }
                  },
                  {
                    "name": "checkAll",
                    "type": {
                      "name": "boolean"
                    }
                  }
                ],
                "return": {
                  "name": "void"
                }
              }
            }
          },
          {
            "name": "showSelectAll",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          },
          {
            "name": "disabled",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "union",
            "raw": "false | JSX.Element",
            "elements": [
              {
                "name": "literal",
                "value": "false"
              },
              {
                "name": "JSX.Element"
              }
            ]
          }
        }
      },
      {
        "name": "handleFilter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "matchFilter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "text",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "item",
            "type": {
              "name": "TransferItem",
              "alias": "TransferItem"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "TransferItem",
              "alias": "TransferItem"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "RenderedItem"
          }
        }
      }
    ],
    "props": {
      "prefixCls": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "titleText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "dataSource": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "TransferItem"
            }
          ],
          "raw": "TransferItem[]"
        },
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "filterOption": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(filterText: string, item: TransferItem) => boolean",
          "signature": {
            "arguments": [
              {
                "name": "filterText",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "item",
                "type": {
                  "name": "TransferItem"
                }
              }
            ],
            "return": {
              "name": "boolean"
            }
          }
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "checkedKeys": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      },
      "handleFilter": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.ChangeEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactChangeEvent",
                  "raw": "React.ChangeEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "handleSelect": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedItem: TransferItem, checked: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "selectedItem",
                "type": {
                  "name": "TransferItem"
                }
              },
              {
                "name": "checked",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "handleSelectAll": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(dataSource: TransferItem[], checkAll: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "dataSource",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "TransferItem"
                    }
                  ],
                  "raw": "TransferItem[]"
                }
              },
              {
                "name": "checkAll",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "[Legacy] Only used when `body` prop used."
      },
      "onItemSelect": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(key: string, check: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "key",
                "type": {
                  "name": "string"
                }
              },
              {
                "name": "check",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onItemSelectAll": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(dataSource: string[], checkAll: boolean) => void",
          "signature": {
            "arguments": [
              {
                "name": "dataSource",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "checkAll",
                "type": {
                  "name": "boolean"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "handleClear": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "render": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(item: TransferItem) => RenderResult",
          "signature": {
            "arguments": [
              {
                "name": "item",
                "type": {
                  "name": "TransferItem"
                }
              }
            ],
            "return": {
              "name": "RenderResult"
            }
          }
        },
        "description": ""
      },
      "showSearch": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "searchPlaceholder": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "notFoundContent": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "itemUnit": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "itemsUnit": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "body": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "renderList": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListBodyProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListBodyProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "footer": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: TransferListProps) => React.ReactNode",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "TransferListProps"
                }
              }
            ],
            "return": {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          }
        },
        "description": ""
      },
      "lazy": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | {}",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{}",
              "signature": {
                "properties": []
              }
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "onScroll": {
        "required": true,
        "tsType": {
          "name": "Function"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "direction": {
        "required": true,
        "tsType": {
          "name": "TransferDirection"
        },
        "description": ""
      },
      "showSelectAll": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/transfer/operation.tsx": {
    "description": "",
    "displayName": "Operation",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "leftArrowText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "rightArrowText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "moveToLeft": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLButtonElement>",
          "elements": [
            {
              "name": "HTMLButtonElement"
            }
          ]
        },
        "description": ""
      },
      "moveToRight": {
        "required": false,
        "tsType": {
          "name": "ReactMouseEventHandler",
          "raw": "React.MouseEventHandler<HTMLButtonElement>",
          "elements": [
            {
              "name": "HTMLButtonElement"
            }
          ]
        },
        "description": ""
      },
      "leftActive": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "rightActive": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/transfer/renderListBody.tsx": {
    "description": "",
    "displayName": "ListBodyWrapper",
    "methods": [],
    "props": {
      "filteredItems": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "TransferItem"
            }
          ],
          "raw": "TransferItem[]"
        },
        "description": ""
      },
      "filteredRenderItems": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "RenderedItem"
            }
          ],
          "raw": "RenderedItem[]"
        },
        "description": ""
      },
      "selectedKeys": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      }
    },
    "composes": [
      "PartialTransferListProps"
    ]
  },
  "components/transfer/search.tsx": {
    "description": "",
    "displayName": "Search",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactChangeEvent",
              "raw": "React.ChangeEvent<HTMLInputElement>",
              "elements": [
                {
                  "name": "HTMLInputElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClear",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLAnchorElement>",
              "elements": [
                {
                  "name": "HTMLAnchorElement"
                }
              ]
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.FormEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactFormEvent",
                  "raw": "React.FormEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "handleClear": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.MouseEvent<HTMLElement>) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  "components/tree/DirectoryTree.tsx": {
    "description": "",
    "displayName": "DirectoryTree",
    "methods": [
      {
        "name": "onExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "expandedKeys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "info",
            "type": {
              "name": "AntTreeNodeExpandedEvent",
              "alias": "AntTreeNodeExpandedEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          },
          {
            "name": "node",
            "type": {
              "name": "AntTreeNode",
              "alias": "AntTreeNode"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onDoubleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          },
          {
            "name": "node",
            "type": {
              "name": "AntTreeNode",
              "alias": "AntTreeNode"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "keys",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          },
          {
            "name": "event",
            "type": {
              "name": "AntTreeNodeSelectedEvent",
              "alias": "AntTreeNodeSelectedEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setTreeRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "Tree",
              "alias": "Tree"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "expandFolderNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "ReactMouseEvent",
              "raw": "React.MouseEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          },
          {
            "name": "node",
            "type": {
              "name": "AntTreeNode",
              "alias": "AntTreeNode"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setUncontrolledState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "state",
            "type": {
              "name": "DirectoryTreeState",
              "alias": "DirectoryTreeState"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderDirectoryTree",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "expandAction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "false | 'click' | 'doubleClick'",
          "elements": [
            {
              "name": "literal",
              "value": "false"
            },
            {
              "name": "literal",
              "value": "'click'"
            },
            {
              "name": "literal",
              "value": "'doubleClick'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'click'",
          "computed": false
        }
      },
      "showIcon": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "TreeProps"
    ]
  },
  "components/tree/Tree.tsx": {
    "description": "",
    "displayName": "Tree",
    "methods": [
      {
        "name": "renderSwitcherIcon",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "switcherIcon",
            "type": {
              "name": "union",
              "raw": "React.ReactElement<any> | undefined",
              "elements": [
                {
                  "name": "ReactReactElement",
                  "raw": "React.ReactElement<any>",
                  "elements": [
                    {
                      "name": "any"
                    }
                  ]
                },
                {
                  "name": "undefined"
                }
              ]
            }
          },
          {
            "name": "{ isLeaf, expanded, loading }: AntTreeNodeProps",
            "type": {
              "name": "AntTreeNodeProps",
              "alias": "AntTreeNodeProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setTreeRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderTree",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "showLine": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "multiple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "是否支持多选"
      },
      "autoExpandParent": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "是否自动展开父节点"
      },
      "checkStrictly": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "checkable状态下节点选择完全受控（父子节点选中状态不再关联）"
      },
      "checkable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "是否支持选中",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "是否禁用树"
      },
      "defaultExpandAll": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "默认展开所有树节点"
      },
      "defaultExpandParent": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "默认展开对应树节点"
      },
      "defaultExpandedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "默认展开指定的树节点"
      },
      "expandedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "（受控）展开指定的树节点"
      },
      "checkedKeys": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string[] | { checked: string[]; halfChecked: string[] }",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{ checked: string[]; halfChecked: string[] }",
              "signature": {
                "properties": [
                  {
                    "key": "checked",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "string"
                        }
                      ],
                      "raw": "string[]",
                      "required": true
                    }
                  },
                  {
                    "key": "halfChecked",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "string"
                        }
                      ],
                      "raw": "string[]",
                      "required": true
                    }
                  }
                ]
              }
            }
          ]
        },
        "description": "（受控）选中复选框的树节点"
      },
      "defaultCheckedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "默认选中复选框的树节点"
      },
      "selectedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "（受控）设置选中的树节点"
      },
      "defaultSelectedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "默认选中的树节点"
      },
      "selectable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "onExpand": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(expandedKeys: string[], info: AntTreeNodeExpandedEvent) => void | PromiseLike<void>",
          "signature": {
            "arguments": [
              {
                "name": "expandedKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "info",
                "type": {
                  "name": "AntTreeNodeExpandedEvent"
                }
              }
            ],
            "return": {
              "name": "union",
              "raw": "void | PromiseLike<void>",
              "elements": [
                {
                  "name": "void"
                },
                {
                  "name": "PromiseLike",
                  "elements": [
                    {
                      "name": "void"
                    }
                  ],
                  "raw": "PromiseLike<void>"
                }
              ]
            }
          }
        },
        "description": "展开/收起节点时触发"
      },
      "onCheck": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  checkedKeys: string[] | { checked: string[]; halfChecked: string[] },\n  e: AntTreeNodeCheckedEvent,\n) => void",
          "signature": {
            "arguments": [
              {
                "name": "checkedKeys",
                "type": {
                  "name": "union",
                  "raw": "string[] | { checked: string[]; halfChecked: string[] }",
                  "elements": [
                    {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "string"
                        }
                      ],
                      "raw": "string[]"
                    },
                    {
                      "name": "signature",
                      "type": "object",
                      "raw": "{ checked: string[]; halfChecked: string[] }",
                      "signature": {
                        "properties": [
                          {
                            "key": "checked",
                            "value": {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "string"
                                }
                              ],
                              "raw": "string[]",
                              "required": true
                            }
                          },
                          {
                            "key": "halfChecked",
                            "value": {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "string"
                                }
                              ],
                              "raw": "string[]",
                              "required": true
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "e",
                "type": {
                  "name": "AntTreeNodeCheckedEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "点击复选框触发"
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(selectedKeys: string[], e: AntTreeNodeSelectedEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "selectedKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "e",
                "type": {
                  "name": "AntTreeNodeSelectedEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "点击树节点触发"
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.MouseEvent<HTMLElement>, node: AntTreeNode) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              },
              {
                "name": "node",
                "type": {
                  "name": "AntTreeNode"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "单击树节点触发"
      },
      "onDoubleClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(e: React.MouseEvent<HTMLElement>, node: AntTreeNode) => void",
          "signature": {
            "arguments": [
              {
                "name": "e",
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLElement>",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    }
                  ]
                }
              },
              {
                "name": "node",
                "type": {
                  "name": "AntTreeNode"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "双击树节点触发"
      },
      "filterAntTreeNode": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(node: AntTreeNode) => boolean",
          "signature": {
            "arguments": [
              {
                "name": "node",
                "type": {
                  "name": "AntTreeNode"
                }
              }
            ],
            "return": {
              "name": "boolean"
            }
          }
        },
        "description": "filter some AntTreeNodes as you need. it should return true"
      },
      "loadData": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(node: AntTreeNode) => PromiseLike<void>",
          "signature": {
            "arguments": [
              {
                "name": "node",
                "type": {
                  "name": "AntTreeNode"
                }
              }
            ],
            "return": {
              "name": "PromiseLike",
              "elements": [
                {
                  "name": "void"
                }
              ],
              "raw": "PromiseLike<void>"
            }
          }
        },
        "description": "异步加载数据"
      },
      "loadedKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": ""
      },
      "onLoad": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(loadedKeys: string[], info: { event: 'load'; node: AntTreeNode }) => void",
          "signature": {
            "arguments": [
              {
                "name": "loadedKeys",
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "string"
                    }
                  ],
                  "raw": "string[]"
                }
              },
              {
                "name": "info",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ event: 'load'; node: AntTreeNode }",
                  "signature": {
                    "properties": [
                      {
                        "key": "event",
                        "value": {
                          "name": "literal",
                          "value": "'load'",
                          "required": true
                        }
                      },
                      {
                        "key": "node",
                        "value": {
                          "name": "AntTreeNode",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onRightClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "响应右键点击"
      },
      "draggable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "设置节点可拖拽（IE>8）"
      },
      "onDragStart": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDragEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeDragEnterEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeDragEnterEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDragOver": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDragLeave": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDragEnd": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onMouseEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onMouseLeave": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeMouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeMouseEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onDrop": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: AntTreeNodeDropEvent) => void",
          "signature": {
            "arguments": [
              {
                "name": "options",
                "type": {
                  "name": "AntTreeNodeDropEvent"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      },
      "showIcon": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "((nodeProps: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode",
          "elements": [
            {
              "name": "unknown"
            },
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            }
          ]
        },
        "description": ""
      },
      "switcherIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactElement",
          "raw": "React.ReactElement<any>",
          "elements": [
            {
              "name": "any"
            }
          ]
        },
        "description": ""
      },
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "filterTreeNode": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(node: AntTreeNode) => boolean",
          "signature": {
            "arguments": [
              {
                "name": "node",
                "type": {
                  "name": "AntTreeNode"
                }
              }
            ],
            "return": {
              "name": "boolean"
            }
          }
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "blockNode": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "treeData": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "TreeNodeNormal"
            }
          ],
          "raw": "Array<TreeNodeNormal>"
        },
        "description": ""
      },
      "motion": {
        "defaultValue": {
          "value": "{\n  ...collapseMotion,\n  motionAppear: false,\n}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/tree-select/index.tsx": {
    "description": "",
    "displayName": "TreeSelect",
    "methods": [
      {
        "name": "saveTreeSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "RcTreeSelect"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSwitcherIcon",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prefixCls",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "{ isLeaf, loading }: AntTreeNodeProps",
            "type": {
              "name": "AntTreeNodeProps",
              "alias": "AntTreeNodeProps"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderTreeSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  getPopupContainer: getContextPopupContainer,\n  getPrefixCls,\n  renderEmpty,\n}: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "transitionName": {
        "defaultValue": {
          "value": "'slide-up'",
          "computed": false
        },
        "required": false
      },
      "choiceTransitionName": {
        "defaultValue": {
          "value": "'zoom'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/typography/Base.tsx": {
    "description": "",
    "displayName": "Base",
    "methods": [
      {
        "name": "onExpandClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onEditClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onEditChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onEditCancel",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCopyClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getEditable",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "name": "BlockProps",
              "alias": "BlockProps"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "EditConfig"
          }
        }
      },
      {
        "name": "getEllipsis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "name": "BlockProps",
              "alias": "BlockProps"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "EllipsisConfig"
          }
        }
      },
      {
        "name": "setContentRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "HTMLElement",
              "alias": "HTMLElement"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "setEditRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "TransButton",
              "alias": "TransButton"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "triggerEdit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "edit",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "resizeOnNextFrame",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "canUseCSSEllipsis",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "syncEllipsis",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "forceRender",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderEdit",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCopy",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderEditInput",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderOperations",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "forceRenderExpanded",
            "optional": true,
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderContent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "editable": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | EditConfig",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "EditConfig"
            }
          ]
        },
        "description": ""
      },
      "copyable": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | CopyConfig",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "CopyConfig"
            }
          ]
        },
        "description": ""
      },
      "type": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'secondary' | 'danger' | 'warning'",
          "elements": [
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'danger'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            }
          ]
        },
        "description": ""
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "ellipsis": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "boolean | EllipsisConfig",
          "elements": [
            {
              "name": "boolean"
            },
            {
              "name": "EllipsisConfig"
            }
          ]
        },
        "description": ""
      },
      "code": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "mark": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "underline": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "delete": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "strong": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      },
      "component": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "children": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "TypographyProps"
    ]
  },
  "components/typography/Editable.tsx": {
    "description": "",
    "displayName": "Editable",
    "methods": [
      {
        "name": "onChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ target: { value } }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCompositionStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCompositionEnd",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ keyCode }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  keyCode,\n  ctrlKey,\n  altKey,\n  metaKey,\n  shiftKey,\n}",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onBlur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "confirmChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setTextarea",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "textarea",
            "type": {
              "name": "TextArea",
              "alias": "TextArea"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "prefixCls": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "aria-label": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "onSave": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string) => void",
          "signature": {
            "arguments": [
              {
                "name": "value",
                "type": {
                  "name": "string"
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "onCancel": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": ""
      }
    }
  },
  "components/typography/Paragraph.tsx": {
    "description": "",
    "displayName": "Paragraph",
    "methods": []
  },
  "components/typography/Text.tsx": {
    "description": "",
    "displayName": "Text",
    "methods": []
  },
  "components/typography/Title.tsx": {
    "description": "",
    "displayName": "Title",
    "methods": []
  },
  "components/upload/Dragger.tsx": {
    "description": "",
    "displayName": "Dragger",
    "methods": [],
    "props": {
      "height": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": ""
      }
    }
  },
  "components/upload/Upload.tsx": {
    "description": "",
    "displayName": "Upload",
    "methods": [
      {
        "name": "saveUpload",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": {
              "name": "RcUpload"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "RcFile",
              "alias": "RcFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onSuccess",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "response",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          },
          {
            "name": "xhr",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onProgress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{ percent: number }",
              "signature": {
                "properties": [
                  {
                    "key": "percent",
                    "value": {
                      "name": "number",
                      "required": true
                    }
                  }
                ]
              }
            }
          },
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onError",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "error",
            "type": {
              "name": "Error",
              "alias": "Error"
            }
          },
          {
            "name": "response",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "info",
            "type": {
              "name": "UploadChangeParam",
              "alias": "UploadChangeParam"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "onFileDrop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": {
              "name": "ReactDragEvent",
              "raw": "React.DragEvent<HTMLDivElement>",
              "elements": [
                {
                  "name": "HTMLDivElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "beforeUpload",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "RcFile",
              "alias": "RcFile"
            }
          },
          {
            "name": "fileList",
            "type": {
              "name": "Array",
              "elements": [
                {
                  "name": "RcFile"
                }
              ],
              "raw": "RcFile[]"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "clearProgressTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "autoUpdateProgress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_",
            "type": {
              "name": "any"
            }
          },
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderUploadList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "locale",
            "type": {
              "name": "UploadLocale",
              "alias": "UploadLocale"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderUpload",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "defaultValue": {
          "value": "'select'",
          "computed": false
        },
        "required": false
      },
      "multiple": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "action": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      },
      "data": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      },
      "accept": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      },
      "beforeUpload": {
        "defaultValue": {
          "value": "T",
          "computed": true
        },
        "required": false
      },
      "showUploadList": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "listType": {
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "required": false
      },
      "className": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      },
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "supportServerRender": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  "components/upload/UploadList.tsx": {
    "description": "",
    "displayName": "UploadList",
    "methods": [
      {
        "name": "handlePreview",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          },
          {
            "name": "e",
            "type": {
              "name": "ReactSyntheticEvent",
              "raw": "React.SyntheticEvent<HTMLElement>",
              "elements": [
                {
                  "name": "HTMLElement"
                }
              ]
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleDownload",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "file",
            "type": {
              "name": "UploadFile",
              "alias": "UploadFile"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "renderUploadList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ getPrefixCls }: ConfigConsumerProps",
            "type": {
              "name": "ConfigConsumerProps",
              "alias": "ConfigConsumerProps"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "listType": {
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "required": false
      },
      "progressAttr": {
        "defaultValue": {
          "value": "{\n  strokeWidth: 2,\n  showInfo: false,\n}",
          "computed": false
        },
        "required": false
      },
      "showRemoveIcon": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "showDownloadIcon": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "showPreviewIcon": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "previewFile": {
        "defaultValue": {
          "value": "previewImage",
          "computed": true
        },
        "required": false
      }
    }
  }
}